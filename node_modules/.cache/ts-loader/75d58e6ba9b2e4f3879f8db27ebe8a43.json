{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-3!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/signature.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/signature.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _parseInt from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport * as b64 from 'base64-url';\nimport { StringReader } from \"../common/classesUtils\";\nimport { num2hexstring } from '../common/functionsUtils';\nimport { SignatureScheme } from './cryptoParams';\n/**\n * Signature generated by signing data with Private Key.\n */\n\nexport var Signature =\n/*#__PURE__*/\nfunction () {\n  _createClass(Signature, null, [{\n    key: \"deserializeJWT\",\n    value: function deserializeJWT(encoded, algorithm, publicKeyId) {\n      var decoded = b64.decode(encoded, 'hex');\n      return new Signature(algorithm, decoded, publicKeyId);\n    }\n    /**\n     * Deserializes PgpSignature to Signature.\n     * @param pgpSignature PgpSignature\n     */\n\n  }, {\n    key: \"deserializePgp\",\n    value: function deserializePgp(pgpSignature) {\n      var value = new Buffer(pgpSignature.Value, 'base64').toString('hex');\n      var deserialzedValue = Signature.deserializeHex(value).value;\n      return new Signature(SignatureScheme.fromLabel(pgpSignature.Algorithm), deserialzedValue);\n    }\n    /**\n     * Deserializes hex representation to Signature\n     * @param data hex string\n     */\n\n  }, {\n    key: \"deserializeHex\",\n    value: function deserializeHex(data) {\n      if (data.length < 4) {\n        throw new Error('Invalid params.');\n      }\n\n      var sr = new StringReader(data);\n\n      var scheme = _parseInt(sr.read(1), 16);\n\n      var sigScheme = SignatureScheme.fromHex(scheme);\n      var value = data.substr(2);\n      var sig = new Signature(sigScheme, value);\n      return sig;\n    }\n  }]);\n\n  function Signature(algorithm, value, publicKeyId) {\n    _classCallCheck(this, Signature);\n\n    this.algorithm = algorithm;\n    this.value = value;\n    this.publicKeyId = publicKeyId;\n  }\n  /**\n   * Serializes signature to Hex representation.\n   * For transfer to java backend and verify it.\n   */\n\n\n  _createClass(Signature, [{\n    key: \"serializeHex\",\n    value: function serializeHex() {\n      var result = '';\n      result += num2hexstring(this.algorithm.hex);\n      result += this.value;\n      return result;\n    }\n    /**\n     * Serializes signature to base64url format.\n     */\n\n  }, {\n    key: \"serializeJWT\",\n    value: function serializeJWT() {\n      return b64.encode(this.value, 'hex');\n    }\n  }]);\n\n  return Signature;\n}();",null]}
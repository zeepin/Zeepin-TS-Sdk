{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-3!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/scrypt.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/scrypt.ts","mtime":1556782440000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport * as asyncScrypt from 'scrypt-async'; //import asyncScrypt from './scrypt-async.min.js';\n\nimport { createCipheriv, createDecipheriv } from 'crypto';\nimport { ERROR_CODE } from \"../common/error\";\nimport { hexstring2ab, isHexString } from \"../common/functionsUtils\";\n/**\n * Synchronious call to scrypt-async-js.\n *\n * @param keyphrase Keyphrase to use\n * @param addressHash Hex encoded address\n * @param params Scrypt params\n */\n\nfunction scrypt(keyphrase, addressHash, params) {\n  var derived = [];\n  asyncScrypt(keyphrase.normalize('NFC'), hexstring2ab(addressHash), {\n    N: params.cost,\n    r: params.blockSize,\n    p: params.parallel,\n    dkLen: params.size\n  }, function (result) {\n    derived = result;\n  });\n  return new Buffer(derived);\n}\n/**\n * Encrypt with aes-gcm-256\n * This is the default encryption algorithm for private key\n * @param privateKey Private key to encpryt with\n * @param address Adderss to encrypt with\n * @param salt Salt to encrypt with\n * @param keyphrase User's password\n * @param scryptParams Optional params to encrypt\n */\n\n\nexport function encryptWithGcm(privateKey, address, salt, keyphrase, scryptParams) {\n  if (!isHexString(privateKey)) {\n    throw new Error(ERROR_CODE.INVALID_PARAMS + ', Invalid private key');\n  }\n\n  var derived = scrypt(keyphrase, salt, scryptParams);\n  var derived1 = derived.slice(0, 12);\n  var derived2 = derived.slice(32);\n  var key = derived2;\n  var iv = derived1;\n  var aad = new Buffer(address.toBase58());\n  var cipher = createCipheriv('aes-256-gcm', key, iv);\n  cipher.setAAD(aad);\n  var plainText = Buffer.from(privateKey, 'hex');\n  var ciphertext = cipher.update(plainText);\n  var final = cipher.final();\n  var authTag = cipher.getAuthTag();\n  ciphertext = Buffer.concat([ciphertext, final]);\n  var result = Buffer.concat([ciphertext, authTag]);\n  return result.toString('base64');\n}\n/**\n * Decrypt with aes-256-gcm\n * @param encrypted Encrypted private key\n * @param address Address to decrypt with\n * @param salt Salt to decrypt with\n * @param keyphrase User's password\n * @param scryptParams Optioanl params to decrypt with\n */\n\nexport function decryptWithGcm(encrypted, address, salt, keyphrase, scryptParams) {\n  if (salt.length !== 32) {\n    throw ERROR_CODE.INVALID_PARAMS;\n  }\n\n  var result = Buffer.from(encrypted, 'base64');\n  var ciphertext = result.slice(0, result.length - 16);\n  var authTag = result.slice(result.length - 16);\n  var derived = scrypt(keyphrase, salt, scryptParams);\n  var derived1 = derived.slice(0, 12);\n  var derived2 = derived.slice(32);\n  var key = derived2;\n  var iv = derived1;\n  var aad = new Buffer(address.toBase58()); // const auth = new Buffer(authTag, 'hex');\n\n  var decipher = createDecipheriv('aes-256-gcm', key, iv);\n  decipher.setAAD(aad);\n  decipher.setAuthTag(authTag);\n  var decrypted = decipher.update(ciphertext).toString('hex');\n\n  try {\n    decrypted += decipher.final().toString('hex');\n  } catch (err) {\n    throw ERROR_CODE.Decrypto_ERROR;\n  }\n\n  return decrypted;\n}",null]}
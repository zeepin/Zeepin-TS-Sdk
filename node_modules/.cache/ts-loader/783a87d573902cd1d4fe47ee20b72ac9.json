{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-3!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/network/rest/restClient.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/network/rest/restClient.ts","mtime":1555654637000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _Map from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/map\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport axios from 'axios';\nimport { TEST_ZEEPIN_URL } from \"../../common/consts\";\nimport { concatParams } from \"../../common/functionsUtils\";\nimport UrlConsts from \"./urlConsts\";\nimport { ERROR_CODE } from \"../../common/error\";\n\nvar RestClient =\n/*#__PURE__*/\nfunction () {\n  function RestClient(url) {\n    _classCallCheck(this, RestClient);\n\n    this.url = url || TEST_ZEEPIN_URL.REST_URL;\n    this.version = 'v1.0.0';\n    this.action = 'sendrawtransaction';\n  }\n\n  _createClass(RestClient, [{\n    key: \"sendRawTransaction\",\n    value: function sendRawTransaction(hexData) {\n      var preExec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var param = new _Map();\n\n      if (preExec) {\n        param.set('preExec', '1');\n      }\n\n      var url = this.url + UrlConsts.Url_send_transaction;\n      url += concatParams(param);\n      var body = {\n        Action: this.action,\n        Version: this.version,\n        Data: hexData\n      };\n      return axios.post(url, body).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getRawTransaction\",\n    value: function getRawTransaction(txHash) {\n      var param = new _Map();\n      param.set('raw', '1');\n      var url = this.url + UrlConsts.Url_get_transaction + txHash;\n      url += concatParams(param);\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getRawTransactionJson\",\n    value: function getRawTransactionJson(txHash) {\n      var param = new _Map();\n      param.set('raw', '0');\n      var url = this.url + UrlConsts.Url_get_transaction + txHash;\n      url += concatParams(param);\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getNodeCount\",\n    value: function getNodeCount() {\n      var url = this.url + UrlConsts.Url_get_node_count;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getBlockHeight\",\n    value: function getBlockHeight() {\n      var url = this.url + UrlConsts.Url_get_block_height;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getBlock\",\n    value: function getBlock(value) {\n      var params = new _Map();\n      params.set('raw', '1');\n      var url = '';\n\n      if (typeof value === 'number') {\n        url = this.url + UrlConsts.Url_get_block_by_height + value;\n      } else if (typeof value === 'string') {\n        url = this.url + UrlConsts.Url_get_block_by_hash + value;\n      }\n\n      url += concatParams(params);\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\n     * Get contract info by code hash.The result is hex encoded string.\n     * @param codeHash Code hash of contract.The value is reversed contract address.\n     */\n\n  }, {\n    key: \"getContract\",\n    value: function getContract(codeHash) {\n      var params = new _Map();\n      params.set('raw', '1');\n      var url = this.url + UrlConsts.Url_get_contract_state + codeHash;\n      url += concatParams(params); // console.log('url: '+url);\n\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\n     * Get contract info by code hash. The result is json.\n     * @param codeHash Code hash of contract.\n     */\n\n  }, {\n    key: \"getContractJson\",\n    value: function getContractJson(codeHash) {\n      var params = new _Map();\n      params.set('raw', '0');\n      var url = this.url + UrlConsts.Url_get_contract_state + codeHash;\n      url += concatParams(params);\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getSmartCodeEvent\",\n    value: function getSmartCodeEvent(value) {\n      var url = '';\n\n      if (typeof value === 'string') {\n        url = this.url + UrlConsts.Url_get_smartcodeevent_by_txhash + value;\n      } else if (typeof value === 'number') {\n        url = this.url + UrlConsts.Url_get_smartcodeevent_txs_by_height + value;\n      }\n\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\n     * Get the block height by reversed transaction hash.\n     * @param hash Reversed transaction hash.\n     */\n\n  }, {\n    key: \"getBlockHeightByTxHash\",\n    value: function getBlockHeightByTxHash(hash) {\n      var url = this.url + UrlConsts.Url_get_block_height_by_txhash + hash;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\n     * Get the stored value in smart contract by the code hash and key.\n     * @param codeHash Code hash of the smart contract\n     * @param key Key of the stored value\n     */\n\n  }, {\n    key: \"getStorage\",\n    value: function getStorage(codeHash, key) {\n      var url = this.url + UrlConsts.Url_get_storage + codeHash + '/' + key;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\n     * Get the merkle proof by transaction hash\n     * @param hash Reversed transaction hash\n     */\n\n  }, {\n    key: \"getMerkleProof\",\n    value: function getMerkleProof(hash) {\n      var url = this.url + UrlConsts.Url_get_merkleproof + hash; // tslint:disable-next-line:no-console\n\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\n     * Get balance of some address\n     * The result contains balance of ZPT and Gala\n     * @param address Address\n     */\n\n  }, {\n    key: \"getBalance\",\n    value: function getBalance(address) {\n      var url = this.url + UrlConsts.Url_get_account_balance + address.toBase58();\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\n     * Get block info by block's height or hash.\n     * @param value Block's height or hash\n     */\n\n  }, {\n    key: \"getBlockJson\",\n    value: function getBlockJson(value) {\n      var url = '';\n\n      if (typeof value === 'number') {\n        url = this.url + UrlConsts.Url_get_block_by_height + value;\n      } else if (typeof value === 'string') {\n        url = this.url + UrlConsts.Url_get_block_by_hash + value;\n      }\n\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n    /**\n     * Get allowance by address\n     * @param asset Asset type. Only ZPT or Gala.\n     * @param from Address of allowance sender.\n     * @param to Address of allowance receiver.\n     */\n\n  }, {\n    key: \"getAllowance\",\n    value: function getAllowance(asset, from, to) {\n      asset = asset.toLowerCase();\n\n      if (asset !== 'zpt' && asset !== 'gala') {\n        throw ERROR_CODE.INVALID_PARAMS;\n      }\n\n      var url = this.url + UrlConsts.Url_get_allowance + asset.toLowerCase() + '/' + from.toBase58() + '/' + to.toBase58();\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getUnboundGala\",\n    value: function getUnboundGala(address) {\n      var url = this.url + UrlConsts.Url_get_unbound_gala + address.toBase58();\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getBlockTxsByHeight\",\n    value: function getBlockTxsByHeight(height) {\n      var url = this.url + UrlConsts.Url_get_block_txs_by_height + height;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      var url = this.url + UrlConsts.Url_get_gasprice;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getMempoolTxCount\",\n    value: function getMempoolTxCount() {\n      var url = this.url + UrlConsts.Url_get_mempool_txcount;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getMempoolTxState\",\n    value: function getMempoolTxState(hash) {\n      var url = this.url + UrlConsts.Url_get_mempool_txstate + hash;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }, {\n    key: \"getVersion\",\n    value: function getVersion() {\n      var url = this.url + UrlConsts.Url_get_version;\n      return axios.get(url).then(function (res) {\n        return res.data;\n      });\n    }\n  }]);\n\n  return RestClient;\n}();\n\nexport { RestClient as default };",null]}
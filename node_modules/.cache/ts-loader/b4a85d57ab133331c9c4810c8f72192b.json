{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-3!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/publicKey.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/publicKey.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _parseInt from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport { KeyType, KeyParameters, Curve } from \"./cryptoParams\";\nimport { Key } from \"./key\";\nimport { num2hexstring } from \"../common/functionsUtils\";\nexport var PublicKey =\n/*#__PURE__*/\nfunction (_Key) {\n  _inherits(PublicKey, _Key);\n\n  function PublicKey() {\n    _classCallCheck(this, PublicKey);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PublicKey).apply(this, arguments));\n  }\n\n  _createClass(PublicKey, [{\n    key: \"serializeHex\",\n\n    /**\n     * Serializes public key to Hex representation.\n     */\n    value: function serializeHex() {\n      var result = '';\n\n      switch (this.algorithm) {\n        case KeyType.ECDSA:\n          result += this.key;\n          break;\n\n        case KeyType.EDDSA:\n        case KeyType.SM2:\n          result += num2hexstring(this.algorithm.hex);\n          result += num2hexstring(this.parameters.curve.hex);\n          result += this.key;\n          break;\n      }\n\n      return result;\n    }\n  }], [{\n    key: \"deserializeHex\",\n    value: function deserializeHex(sr) {\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 33;\n\n      if (length === 33) {\n        // ECDSA\n        var algorithm = KeyType.ECDSA;\n        var curve = Curve.SECP256R1;\n        var pk = sr.read(33);\n        return new PublicKey(pk, algorithm, new KeyParameters(curve));\n      } else {\n        var algorithmHex = _parseInt(sr.read(1), 16);\n\n        var curveHex = _parseInt(sr.read(1), 16);\n\n        var _pk = sr.read(length - 2);\n\n        return new PublicKey(_pk, KeyType.fromHex(algorithmHex), new KeyParameters(Curve.fromHex(curveHex)));\n      }\n    }\n  }]);\n\n  return PublicKey;\n}(Key);",null]}
{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-2!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/publicKey.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/publicKey.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _parseInt from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport { KeyType, KeyParameters, Curve } from \"./cryptoParams\";\nimport { Key } from \"./key\";\nimport { num2hexstring } from \"../common/functionsUtils\";\nexport var PublicKey =\n/*#__PURE__*/\nfunction (_Key) {\n  _inherits(PublicKey, _Key);\n\n  function PublicKey() {\n    _classCallCheck(this, PublicKey);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PublicKey).apply(this, arguments));\n  }\n\n  _createClass(PublicKey, [{\n    key: \"serializeHex\",\n\n    /**\n     * Serializes public key to Hex representation.\n     */\n    value: function serializeHex() {\n      var result = '';\n\n      switch (this.algorithm) {\n        case KeyType.ECDSA:\n          result += this.key;\n          break;\n\n        case KeyType.EDDSA:\n        case KeyType.SM2:\n          result += num2hexstring(this.algorithm.hex);\n          result += num2hexstring(this.parameters.curve.hex);\n          result += this.key;\n          break;\n      }\n\n      return result;\n    }\n  }], [{\n    key: \"deserializeHex\",\n    value: function deserializeHex(sr) {\n      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 33;\n\n      if (length === 33) {\n        // ECDSA\n        var algorithm = KeyType.ECDSA;\n        var curve = Curve.SECP256R1;\n        var pk = sr.read(33);\n        return new PublicKey(pk, algorithm, new KeyParameters(curve));\n      } else {\n        var algorithmHex = _parseInt(sr.read(1), 16);\n\n        var curveHex = _parseInt(sr.read(1), 16);\n\n        var _pk = sr.read(length - 2);\n\n        return new PublicKey(_pk, KeyType.fromHex(algorithmHex), new KeyParameters(Curve.fromHex(curveHex)));\n      }\n    }\n  }]);\n\n  return PublicKey;\n}(Key);",{"version":3,"sources":["/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/publicKey.ts"],"names":[],"mappings":";;;;;;AACA,SAAS,OAAT,EAAkB,aAAlB,EAAiC,KAAjC,QAA8C,gBAA9C;AACA,SAAS,GAAT,QAAoB,OAApB;AACA,SAAS,aAAT,QAA8B,0BAA9B;AAEA,WAAa,SAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAqBI;;;AArBJ,mCAwBgB;AACR,UAAI,MAAM,GAAG,EAAb;;AACA,cAAQ,KAAK,SAAb;AACI,aAAK,OAAO,CAAC,KAAb;AACI,UAAA,MAAM,IAAI,KAAK,GAAf;AACA;;AACJ,aAAK,OAAO,CAAC,KAAb;AACA,aAAK,OAAO,CAAC,GAAb;AACI,UAAA,MAAM,IAAI,aAAa,CAAC,KAAK,SAAL,CAAe,GAAhB,CAAvB;AACA,UAAA,MAAM,IAAI,aAAa,CAAC,KAAK,UAAL,CAAgB,KAAhB,CAAsB,GAAvB,CAAvB;AACA,UAAA,MAAM,IAAI,KAAK,GAAf;AACA;AATR;;AAWA,aAAO,MAAP;AACH;AAtCL;AAAA;AAAA,mCAE0B,EAF1B,EAE+D;AAAA,UAAnB,MAAmB,uEAAF,EAAE;;AACvD,UAAI,MAAM,KAAK,EAAf,EAAmB;AAAE;AACjB,YAAM,SAAS,GAAG,OAAO,CAAC,KAA1B;AACA,YAAM,KAAK,GAAG,KAAK,CAAC,SAApB;AACA,YAAM,EAAE,GAAG,EAAE,CAAC,IAAH,CAAQ,EAAR,CAAX;AACA,eAAO,IAAI,SAAJ,CAAc,EAAd,EAAkB,SAAlB,EAA6B,IAAI,aAAJ,CAAkB,KAAlB,CAA7B,CAAP;AACH,OALD,MAKO;AACH,YAAM,YAAY,GAAG,UAAS,EAAE,CAAC,IAAH,CAAQ,CAAR,CAAT,EAAqB,EAArB,CAArB;;AACA,YAAM,QAAQ,GAAG,UAAS,EAAE,CAAC,IAAH,CAAQ,CAAR,CAAT,EAAqB,EAArB,CAAjB;;AACA,YAAM,GAAE,GAAG,EAAE,CAAC,IAAH,CAAQ,MAAM,GAAG,CAAjB,CAAX;;AAEA,eAAO,IAAI,SAAJ,CACH,GADG,EAEH,OAAO,CAAC,OAAR,CAAgB,YAAhB,CAFG,EAGH,IAAI,aAAJ,CAAkB,KAAK,CAAC,OAAN,CAAc,QAAd,CAAlB,CAHG,CAAP;AAKH;AACJ;AAnBL;;AAAA;AAAA,EAA+B,GAA/B","sourcesContent":["import { StringReader } from \"../common/classesUtils\";\nimport { KeyType, KeyParameters, Curve } from \"./cryptoParams\";\nimport { Key } from \"./key\";\nimport { num2hexstring } from \"../common/functionsUtils\";\n\nexport class PublicKey extends Key {\n\n    static deserializeHex(sr: StringReader, length: number = 33): PublicKey {\n        if (length === 33) { // ECDSA\n            const algorithm = KeyType.ECDSA;\n            const curve = Curve.SECP256R1;\n            const pk = sr.read(33);\n            return new PublicKey(pk, algorithm, new KeyParameters(curve));\n        } else {\n            const algorithmHex = parseInt(sr.read(1), 16);\n            const curveHex = parseInt(sr.read(1), 16);\n            const pk = sr.read(length - 2);\n\n            return new PublicKey(\n                pk,\n                KeyType.fromHex(algorithmHex),\n                new KeyParameters(Curve.fromHex(curveHex))\n            );\n        }\n    }\n\n    /**\n     * Serializes public key to Hex representation.\n     */\n    serializeHex(): string {\n        let result = '';\n        switch (this.algorithm) {\n            case KeyType.ECDSA:\n                result += this.key;\n                break;\n            case KeyType.EDDSA:\n            case KeyType.SM2:\n                result += num2hexstring(this.algorithm.hex);\n                result += num2hexstring(this.parameters.curve.hex);\n                result += this.key;\n                break;\n        }\n        return result;\n    }\n\n}\n"],"sourceRoot":""}]}
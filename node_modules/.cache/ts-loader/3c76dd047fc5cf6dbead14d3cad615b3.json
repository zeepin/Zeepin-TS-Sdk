{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-3!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/wallet/account.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/wallet/account.ts","mtime":1556784567000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport _JSON$stringify from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { Address } from './address';\nimport { randomBytes } from \"../common/functionsUtils\";\nimport { PrivateKey } from \"../crypto/privateKey\";\nexport var Account =\n/*#__PURE__*/\nfunction () {\n  function Account() {\n    _classCallCheck(this, Account);\n\n    this['enc-alg'] = 'aes-256-gcm';\n    this.hash = 'sha256';\n    this.algorithm = 'ECDSA';\n    this.parameters = {\n      curve: 'P-256'\n    };\n  }\n  /**\n   * create account\n   */\n\n\n  _createClass(Account, [{\n    key: \"toJson\",\n    value: function toJson() {\n      return _JSON$stringify(this.toJsonObj());\n    }\n    /**\n     * accounts in keystore\n     */\n\n  }, {\n    key: \"toJsonObj\",\n    value: function toJsonObj() {\n      var obj = {\n        'address': this.address.toBase58(),\n        'algorithm': this.algorithm,\n        'enc-alg': this['enc-alg'],\n        'hash': this.hash,\n        'isDefault': this.isDefault,\n        'key': this.encryptedKey.key,\n        'label': this.label,\n        'lock': this.lock,\n        'parameters': this.parameters,\n        'publicKey': this.publicKey,\n        'salt': this.salt,\n        'signatureScheme': this.encryptedKey.algorithm.defaultSchema.label\n      };\n      return obj;\n    }\n  }, {\n    key: \"exportPrivateKey\",\n    value: function exportPrivateKey(password, n) {\n      return this.encryptedKey.decrypt(password, this.address, this.salt, n);\n    }\n  }], [{\n    key: \"createAccount\",\n    value: function createAccount(password, label) {\n      var account = new Account();\n\n      if (!label) {\n        label = randomBytes(4);\n      }\n\n      account.label = label;\n      account.isDefault = true;\n      account.lock = false;\n      var privateKey = PrivateKey.random(); //随机生成私钥\n\n      var publicKey = privateKey.getPublicKey();\n      account.publicKey = publicKey.serializeHex();\n      var address = Address.fromPubKey(publicKey);\n      account.address = address;\n      var salt = randomBytes(16);\n      account.salt = Buffer.from(salt, 'hex').toString('base64');\n      account.encryptedKey = privateKey.encrypt(password, address, salt);\n      return account;\n    }\n    /**\n     * Import account\n     */\n\n  }, {\n    key: \"importAccountByPrivateKey\",\n    value: function importAccountByPrivateKey(password, privateKey, label) {\n      var account = new Account();\n\n      if (!label) {\n        label = randomBytes(4);\n      }\n\n      account.label = label;\n      account.isDefault = true;\n      account.lock = false;\n      var privatekey = new PrivateKey(privateKey);\n      var publicKey = privatekey.getPublicKey();\n      account.publicKey = publicKey.serializeHex();\n      var address = Address.fromPubKey(publicKey);\n      account.address = address;\n      var salt = randomBytes(16);\n      account.salt = Buffer.from(salt, 'hex').toString('base64');\n      account.encryptedKey = privatekey.encrypt(password, address, salt);\n      return account;\n    }\n  }, {\n    key: \"importAccountByKeystore\",\n    value: function importAccountByKeystore(password, keystore) {\n      var account = new Account(); // @ts-ignore\n\n      var address = new Address(keystore.accounts[0].address);\n      account.address = new Address(address.serialize()); // @ts-ignore\n\n      account.label = keystore.accounts[0].label; // @ts-ignore\n\n      account.salt = keystore.accounts[0].salt;\n      account.lock = false;\n      account.isDefault = true; // @ts-ignore\n\n      account.encryptedKey = new PrivateKey(keystore.accounts[0].key); // @ts-ignore\n\n      var privateKey = account.exportPrivateKey(password, keystore.scrypt.n);\n      account.publicKey = privateKey.getPublicKey().serializeHex();\n      return account;\n    }\n    /**\n     * modify password\n     */\n\n  }, {\n    key: \"modifyPassword\",\n    value: function modifyPassword(oldPassword, newPassword, keystore) {\n      var account = new Account(); // @ts-ignore\n\n      var address = new Address(keystore.accounts[0].address);\n      account.address = new Address(address.serialize()); // @ts-ignore\n\n      account.label = keystore.accounts[0].label; // @ts-ignore\n\n      account.salt = keystore.accounts[0].salt;\n      account.lock = false;\n      account.isDefault = true; // @ts-ignore\n\n      account.encryptedKey = new PrivateKey(keystore.accounts[0].key); // @ts-ignore\n\n      var privateKey = account.exportPrivateKey(oldPassword, keystore.scrypt.n);\n      account.publicKey = privateKey.getPublicKey().serializeHex();\n      var salt = randomBytes(16);\n      account.salt = Buffer.from(salt, 'hex').toString('base64');\n      account.encryptedKey = privateKey.encrypt(newPassword, account.address, salt);\n      return account;\n    }\n  }]);\n\n  return Account;\n}();",null]}
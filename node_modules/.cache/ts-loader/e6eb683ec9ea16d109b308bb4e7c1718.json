{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-3!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/common/classesUtils.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/common/classesUtils.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _parseInt from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.string.repeat\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport { BigNumber } from \"bignumber.js\";\nimport { ERROR_CODE } from \"./error\";\nimport * as Long from \"long\";\nimport { bigIntToBytes, reverseHex } from \"./functionsUtils\";\nexport var resultParams = function resultParams() {\n  _classCallCheck(this, resultParams);\n\n  this.name = '';\n  this.value = '';\n};\nexport var BigInt =\n/*#__PURE__*/\nfunction () {\n  function BigInt(value) {\n    _classCallCheck(this, BigInt);\n\n    var bi = new BigNumber(value);\n\n    if (!bi.isInteger() || bi.isNegative()) {\n      throw ERROR_CODE.INVALID_PARAMS;\n    }\n\n    this.value = value;\n  }\n  /**\n   * Create BigInt from string\n   * @param hex Byte string value\n   */\n\n\n  _createClass(BigInt, [{\n    key: \"toHexstr\",\n\n    /**\n     * Create hex string from BigInt\n     */\n    value: function toHexstr() {\n      var bi = Long.fromValue(this.value);\n      var hex = bigIntToBytes(bi);\n      return hex;\n    }\n  }], [{\n    key: \"fromHexstr\",\n    value: function fromHexstr(hex) {\n      hex = reverseHex(hex);\n      var bi = new BigNumber(hex, 16).toString();\n      return new BigInt(bi);\n    }\n  }]);\n\n  return BigInt;\n}();\nexport var Fixed64 =\n/*#__PURE__*/\nfunction () {\n  _createClass(Fixed64, null, [{\n    key: \"deserialize\",\n    value: function deserialize(sr) {\n      var f = new Fixed64();\n      var v = sr.read(8); // f.value = hexstr2str(v)\n\n      v = reverseHex(v);\n\n      while (v.substr(0, 2) === '00') {\n        v = v.substring(2);\n      }\n\n      f.value = new BigNumber(v, 16).toString();\n      return f;\n    }\n  }]);\n\n  function Fixed64(value) {\n    _classCallCheck(this, Fixed64);\n\n    if (value && value.length > 16 || value && !/^[0-9]\\d*$/.test(value)) {\n      throw new Error('Invalid value.' + value);\n    }\n\n    this.value = value || '0000000000000000';\n  }\n\n  _createClass(Fixed64, [{\n    key: \"serialize\",\n    value: function serialize() {\n      // return str2hexstr(this.value)\n      var hexstring = new BigNumber(this.value).toString(16);\n      var size = 8 * 2;\n      hexstring = hexstring.length % size === 0 ? hexstring : ('0'.repeat(size) + hexstring).substring(hexstring.length);\n      hexstring = reverseHex(hexstring);\n      return hexstring;\n    }\n  }]);\n\n  return Fixed64;\n}();\n/**\n * @class StringReader\n * @classdesc A string helper used to read given string as bytes.2 chars as one byte.\n * @param {string} str - The string to read.\n */\n\nexport var StringReader =\n/*#__PURE__*/\nfunction () {\n  function StringReader() {\n    var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    _classCallCheck(this, StringReader);\n\n    if (str.length % 2 !== 0) {\n      throw new Error('Param\\'s length is not even.');\n    }\n\n    this.str = str;\n    this.pos = 0;\n    this.size = this.str.length / 2;\n  }\n  /**\n   * Checks if reached the end of the string.\n   */\n\n\n  _createClass(StringReader, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.pos >= this.str.length;\n    }\n    /**\n     * Reads some bytes.\n     * @param {number} bytes - Number of bytes to read\n     */\n\n  }, {\n    key: \"read\",\n    value: function read(bytes) {\n      if (this.isEmpty()) {\n        throw new Error('StringReader reached the end.');\n      }\n\n      var out = this.str.substr(this.pos, bytes * 2);\n      this.pos += bytes * 2;\n      return out;\n    }\n  }, {\n    key: \"unreadBytes\",\n    value: function unreadBytes(bytes) {\n      if (this.pos - bytes * 2 < 0) {\n        throw new Error('Can not unread too many bytes.');\n      }\n\n      this.pos -= bytes * 2;\n      return;\n    }\n    /**\n     * Reads string terminated by NULL.\n     */\n\n  }, {\n    key: \"readNullTerminated\",\n    value: function readNullTerminated() {\n      var index = this.str.indexOf('00', this.pos);\n\n      if (index === -1) {\n        throw new Error('No ending NULL found');\n      }\n\n      var out = this.str.substring(this.pos, index);\n      this.pos = index + 2;\n      return out;\n    }\n    /**\n     * First, read one byte as the length of bytes to read. Then read the following bytes.\n     */\n\n  }, {\n    key: \"readNextBytes\",\n    value: function readNextBytes() {\n      var bytesToRead = this.readNextLen();\n\n      if (bytesToRead === 0) {\n        return '';\n      }\n\n      return this.read(bytesToRead);\n    }\n    /**\n     * Reads one byte as int, which may indicates the length of following bytes to read.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"readNextLen\",\n    value: function readNextLen() {\n      var len = _parseInt(this.read(1), 16);\n\n      if (len === 0xfd) {\n        len = _parseInt(reverseHex(this.read(2)), 16);\n      } else if (len === 0xfe) {\n        len = _parseInt(reverseHex(this.read(4)), 16);\n      } else if (len === 0xff) {\n        len = _parseInt(reverseHex(this.read(8)), 16);\n      }\n\n      return len;\n    }\n    /**\n     * Read Uint8\n     */\n\n  }, {\n    key: \"readUint8\",\n    value: function readUint8() {\n      return _parseInt(reverseHex(this.read(1)), 16);\n    }\n    /**\n     * read 2 bytes as uint16 in littleEndian\n     */\n\n  }, {\n    key: \"readUint16\",\n    value: function readUint16() {\n      return _parseInt(reverseHex(this.read(2)), 16);\n    }\n    /**\n     * Read 4 bytes as uint32 in littleEndian\n     */\n\n  }, {\n    key: \"readUint32\",\n    value: function readUint32() {\n      return _parseInt(reverseHex(this.read(4)), 16);\n    }\n    /**\n     * Read 4 bytes as int in littleEndian\n     */\n\n  }, {\n    key: \"readInt\",\n    value: function readInt() {\n      return _parseInt(reverseHex(this.read(4)), 16);\n    }\n    /**\n     * Read 8 bytes as long in littleEndian\n     */\n\n  }, {\n    key: \"readLong\",\n    value: function readLong() {\n      return _parseInt(reverseHex(this.read(8)), 16);\n    }\n  }, {\n    key: \"readBoolean\",\n    value: function readBoolean() {\n      return _parseInt(this.read(1), 16) !== 0;\n    }\n  }]);\n\n  return StringReader;\n}();",null]}
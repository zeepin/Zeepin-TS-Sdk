{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-2!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/transactionUtils.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/transactionUtils.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _Array$isArray from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/array/is-array\";\nimport _getIterator from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { Fixed64 } from '../common/classesUtils';\nimport { BigNumber } from 'bignumber.js';\nimport { TOKEN_TYPE, ZPT_CONTRACT, GALA_CONTRACT, NATIVE_INVOKE_NAME } from \"../common/consts\";\nimport opcode from '../common/opCode';\nimport { pushHexString, pushInt, pushBigNum, pushBool } from \"../common/constsUtils\";\nimport { str2hexstr, num2hexstring } from \"../common/functionsUtils\";\nimport { Address } from \"../wallet/address\";\nimport { InvokeCode } from \"./payload\";\nimport { TxType, Transaction, Transfer } from \"./transaction\";\nexport var Struct =\n/*#__PURE__*/\nfunction () {\n  function Struct() {\n    _classCallCheck(this, Struct);\n\n    this.list = [];\n  }\n\n  _createClass(Struct, [{\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var _arr = args;\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var a = _arr[_i];\n        this.list.push(a);\n      }\n    }\n  }]);\n\n  return Struct;\n}();\nexport function getTokenContract(tokenType) {\n  if (tokenType === TOKEN_TYPE.ZPT) {\n    return new Address(ZPT_CONTRACT);\n  } else if (tokenType === TOKEN_TYPE.GALA) {\n    return new Address(GALA_CONTRACT);\n  } else {\n    throw new Error('Error token type.');\n  }\n}\nexport function verifyAmount(amount) {\n  var value = new BigNumber(amount);\n\n  if (!value.isInteger() || value.lte(new BigNumber(0))) {\n    throw new Error('Amount is invalid.');\n  }\n}\nexport function createCodeParamScript(obj) {\n  var result = '';\n\n  if (typeof obj === 'string') {\n    result += pushHexString(obj);\n  } else if (typeof obj === 'boolean') {\n    result += pushBool(obj);\n  } else if (typeof obj === 'number') {\n    result += pushInt(obj);\n  } else if (obj instanceof BigNumber) {\n    result += pushBigNum(obj);\n  } else if (obj instanceof Address) {\n    result += pushHexString(obj.serialize());\n  } else if (obj instanceof Struct) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(obj.list), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var v = _step.value;\n        result += createCodeParamScript(v);\n        result += num2hexstring(opcode.DUPFROMALTSTACK);\n        result += num2hexstring(opcode.SWAP);\n        result += num2hexstring(opcode.APPEND);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return result;\n}\nexport function buildNativeCodeScript(list) {\n  var result = '';\n\n  for (var i = list.length - 1; i >= 0; i--) {\n    var val = list[i]; // Consider string as hexstr\n\n    if (typeof val === 'string') {\n      result += pushHexString(val);\n    } else if (typeof val === 'boolean') {\n      result += pushBool(val);\n    } else if (typeof val === 'number') {\n      result += pushInt(val);\n    } else if (val instanceof BigNumber) {\n      result += pushBigNum(val);\n    } else if (val instanceof Address) {\n      result += pushHexString(val.serialize());\n    } else if (val instanceof Struct) {\n      result += pushInt(0);\n      result += num2hexstring(opcode.NEWSTRUCT);\n      result += num2hexstring(opcode.TOALTSTACK);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _getIterator(val.list), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var v = _step2.value;\n          result += createCodeParamScript(v);\n          result += num2hexstring(opcode.DUPFROMALTSTACK);\n          result += num2hexstring(opcode.SWAP);\n          result += num2hexstring(opcode.APPEND);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      result += num2hexstring(opcode.FROMALTSTACK);\n    } else if (_Array$isArray(val)) {\n      result += buildNativeCodeScript(val);\n      result += pushInt(val.length);\n      result += num2hexstring(opcode.PACK);\n    }\n  }\n\n  return result;\n}\nexport function makeNativeContractTx(funcName, params, contractAddr, gasPrice, gasLimit, payer) {\n  var code = '';\n  code += params;\n  code += pushHexString(str2hexstr(funcName));\n  code += pushHexString(contractAddr.serialize());\n  code += pushInt(0);\n  code += num2hexstring(opcode.SYSCALL);\n  code += pushHexString(str2hexstr(NATIVE_INVOKE_NAME));\n  var payload = new InvokeCode();\n  payload.code = code;\n  var tx;\n\n  if (funcName === 'transfer' || funcName === 'transferFrom') {\n    tx = new Transfer();\n  } else {\n    tx = new Transaction();\n  }\n\n  tx.type = TxType.Invoke;\n  tx.payload = payload;\n\n  if (gasLimit) {\n    tx.gasLimit = new Fixed64(gasLimit);\n  }\n\n  if (gasPrice) {\n    tx.gasPrice = new Fixed64(gasPrice);\n  }\n\n  if (payer) {\n    tx.payer = payer;\n  }\n\n  return tx;\n}",{"version":3,"sources":["/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/transactionUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Fixed64 } from '../common/classesUtils';\nimport { BigNumber } from 'bignumber.js'\nimport { TOKEN_TYPE, ZPT_CONTRACT, GALA_CONTRACT, NATIVE_INVOKE_NAME } from \"../common/consts\";\nimport opcode from '../common/opCode';\nimport { pushHexString, pushInt, pushBigNum, pushBool } from \"../common/constsUtils\";\nimport { str2hexstr, num2hexstring } from \"../common/functionsUtils\";\nimport { Address } from \"../wallet/address\";\nimport { InvokeCode } from \"./payload\";\nimport { TxType, Transaction, Transfer } from \"./transaction\";\n\n\nexport class Struct {\n    list: any[];\n    constructor() {\n        this.list = [];\n    }\n    add(...args: any[]) {\n        for (const a of args) {\n            this.list.push(a);\n        }\n    }\n}\n\nexport function getTokenContract(tokenType: string) {\n    if (tokenType === TOKEN_TYPE.ZPT) {\n        return new Address(ZPT_CONTRACT);\n    } else if (tokenType === TOKEN_TYPE.GALA) {\n        return new Address(GALA_CONTRACT);\n    } else {\n        throw new Error('Error token type.');\n    }\n}\n\nexport function verifyAmount(amount: number | string) {\n    const value = new BigNumber(amount);\n    if (!value.isInteger() || value.lte(new BigNumber(0))) {\n        throw new Error('Amount is invalid.');\n    }\n}\n\nexport function createCodeParamScript(obj: any): string {\n    let result = '';\n    if (typeof obj === 'string') {\n        result += pushHexString(obj);\n    } else if (typeof obj === 'boolean') {\n        result += pushBool(obj);\n    } else if (typeof obj === 'number') {\n        result += pushInt(obj);\n    } else if (obj instanceof BigNumber) {\n        result += pushBigNum(obj);\n    } else if (obj instanceof Address) {\n        result += pushHexString(obj.serialize());\n    } else if (obj instanceof Struct) {\n        for (const v of obj.list) {\n            result += createCodeParamScript(v);\n            result += num2hexstring(opcode.DUPFROMALTSTACK);\n            result += num2hexstring(opcode.SWAP);\n            result += num2hexstring(opcode.APPEND);\n        }\n    }\n    return result;\n}\n\nexport function buildNativeCodeScript(list: any[]) {\n    let result = '';\n    for (let i = list.length - 1; i >= 0; i--) {\n        const val = list[i];\n        // Consider string as hexstr\n        if (typeof val === 'string') {\n            result += pushHexString(val);\n        } else if (typeof val === 'boolean') {\n            result += pushBool(val);\n        } else if (typeof val === 'number') {\n            result += pushInt(val);\n        } else if (val instanceof BigNumber) {\n            result += pushBigNum(val);\n        } else if (val instanceof Address) {\n            result += pushHexString(val.serialize());\n        } else if (val instanceof Struct) {\n            result += pushInt(0);\n            result += num2hexstring(opcode.NEWSTRUCT);\n            result += num2hexstring(opcode.TOALTSTACK);\n            for (const v of val.list) {\n                result += createCodeParamScript(v);\n                result += num2hexstring(opcode.DUPFROMALTSTACK);\n                result += num2hexstring(opcode.SWAP);\n                result += num2hexstring(opcode.APPEND);\n            }\n            result += num2hexstring(opcode.FROMALTSTACK);\n        } else if (Array.isArray(val)) {\n            result += buildNativeCodeScript(val);\n            result += pushInt(val.length);\n            result += num2hexstring(opcode.PACK);\n        }\n    }\n    return result;\n}\n\nexport function makeNativeContractTx(\n    funcName: string,\n    params: string,\n    contractAddr: Address,\n    gasPrice?: string,\n    gasLimit?: string,\n    payer?: Address\n) {\n    let code = '';\n    code += params;\n    code += pushHexString(str2hexstr(funcName));\n    code += pushHexString(contractAddr.serialize());\n    code += pushInt(0);\n    code += num2hexstring(opcode.SYSCALL);\n    code += pushHexString(str2hexstr(NATIVE_INVOKE_NAME));\n    const payload = new InvokeCode();\n    payload.code = code;\n    let tx: Transaction;\n    if (funcName === 'transfer' || funcName === 'transferFrom') {\n        tx = new Transfer();\n    } else {\n        tx = new Transaction();\n    }\n    tx.type = TxType.Invoke;\n    tx.payload = payload;\n    if (gasLimit) {\n        tx.gasLimit = new Fixed64(gasLimit);\n    }\n    if (gasPrice) {\n        tx.gasPrice = new Fixed64(gasPrice);\n    }\n    if (payer) {\n        tx.payer = payer;\n    }\n    return tx;\n}\n"],"sourceRoot":""}]}
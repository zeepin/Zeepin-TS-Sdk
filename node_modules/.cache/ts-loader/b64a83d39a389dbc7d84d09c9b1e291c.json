{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-2!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/common/classesUtils.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/common/classesUtils.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _parseInt from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.string.repeat\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport { BigNumber } from \"bignumber.js\";\nimport { ERROR_CODE } from \"./error\";\nimport * as Long from \"long\";\nimport { bigIntToBytes, reverseHex } from \"./functionsUtils\";\nexport var resultParams = function resultParams() {\n  _classCallCheck(this, resultParams);\n\n  this.name = '';\n  this.value = '';\n};\nexport var BigInt =\n/*#__PURE__*/\nfunction () {\n  function BigInt(value) {\n    _classCallCheck(this, BigInt);\n\n    var bi = new BigNumber(value);\n\n    if (!bi.isInteger() || bi.isNegative()) {\n      throw ERROR_CODE.INVALID_PARAMS;\n    }\n\n    this.value = value;\n  }\n  /**\n   * Create BigInt from string\n   * @param hex Byte string value\n   */\n\n\n  _createClass(BigInt, [{\n    key: \"toHexstr\",\n\n    /**\n     * Create hex string from BigInt\n     */\n    value: function toHexstr() {\n      var bi = Long.fromValue(this.value);\n      var hex = bigIntToBytes(bi);\n      return hex;\n    }\n  }], [{\n    key: \"fromHexstr\",\n    value: function fromHexstr(hex) {\n      hex = reverseHex(hex);\n      var bi = new BigNumber(hex, 16).toString();\n      return new BigInt(bi);\n    }\n  }]);\n\n  return BigInt;\n}();\nexport var Fixed64 =\n/*#__PURE__*/\nfunction () {\n  _createClass(Fixed64, null, [{\n    key: \"deserialize\",\n    value: function deserialize(sr) {\n      var f = new Fixed64();\n      var v = sr.read(8); // f.value = hexstr2str(v)\n\n      v = reverseHex(v);\n\n      while (v.substr(0, 2) === '00') {\n        v = v.substring(2);\n      }\n\n      f.value = new BigNumber(v, 16).toString();\n      return f;\n    }\n  }]);\n\n  function Fixed64(value) {\n    _classCallCheck(this, Fixed64);\n\n    if (value && value.length > 16 || value && !/^[0-9]\\d*$/.test(value)) {\n      throw new Error('Invalid value.' + value);\n    }\n\n    this.value = value || '0000000000000000';\n  }\n\n  _createClass(Fixed64, [{\n    key: \"serialize\",\n    value: function serialize() {\n      // return str2hexstr(this.value)\n      var hexstring = new BigNumber(this.value).toString(16);\n      var size = 8 * 2;\n      hexstring = hexstring.length % size === 0 ? hexstring : ('0'.repeat(size) + hexstring).substring(hexstring.length);\n      hexstring = reverseHex(hexstring);\n      return hexstring;\n    }\n  }]);\n\n  return Fixed64;\n}();\n/**\n * @class StringReader\n * @classdesc A string helper used to read given string as bytes.2 chars as one byte.\n * @param {string} str - The string to read.\n */\n\nexport var StringReader =\n/*#__PURE__*/\nfunction () {\n  function StringReader() {\n    var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    _classCallCheck(this, StringReader);\n\n    if (str.length % 2 !== 0) {\n      throw new Error('Param\\'s length is not even.');\n    }\n\n    this.str = str;\n    this.pos = 0;\n    this.size = this.str.length / 2;\n  }\n  /**\n   * Checks if reached the end of the string.\n   */\n\n\n  _createClass(StringReader, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.pos >= this.str.length;\n    }\n    /**\n     * Reads some bytes.\n     * @param {number} bytes - Number of bytes to read\n     */\n\n  }, {\n    key: \"read\",\n    value: function read(bytes) {\n      if (this.isEmpty()) {\n        throw new Error('StringReader reached the end.');\n      }\n\n      var out = this.str.substr(this.pos, bytes * 2);\n      this.pos += bytes * 2;\n      return out;\n    }\n  }, {\n    key: \"unreadBytes\",\n    value: function unreadBytes(bytes) {\n      if (this.pos - bytes * 2 < 0) {\n        throw new Error('Can not unread too many bytes.');\n      }\n\n      this.pos -= bytes * 2;\n      return;\n    }\n    /**\n     * Reads string terminated by NULL.\n     */\n\n  }, {\n    key: \"readNullTerminated\",\n    value: function readNullTerminated() {\n      var index = this.str.indexOf('00', this.pos);\n\n      if (index === -1) {\n        throw new Error('No ending NULL found');\n      }\n\n      var out = this.str.substring(this.pos, index);\n      this.pos = index + 2;\n      return out;\n    }\n    /**\n     * First, read one byte as the length of bytes to read. Then read the following bytes.\n     */\n\n  }, {\n    key: \"readNextBytes\",\n    value: function readNextBytes() {\n      var bytesToRead = this.readNextLen();\n\n      if (bytesToRead === 0) {\n        return '';\n      }\n\n      return this.read(bytesToRead);\n    }\n    /**\n     * Reads one byte as int, which may indicates the length of following bytes to read.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"readNextLen\",\n    value: function readNextLen() {\n      var len = _parseInt(this.read(1), 16);\n\n      if (len === 0xfd) {\n        len = _parseInt(reverseHex(this.read(2)), 16);\n      } else if (len === 0xfe) {\n        len = _parseInt(reverseHex(this.read(4)), 16);\n      } else if (len === 0xff) {\n        len = _parseInt(reverseHex(this.read(8)), 16);\n      }\n\n      return len;\n    }\n    /**\n     * Read Uint8\n     */\n\n  }, {\n    key: \"readUint8\",\n    value: function readUint8() {\n      return _parseInt(reverseHex(this.read(1)), 16);\n    }\n    /**\n     * read 2 bytes as uint16 in littleEndian\n     */\n\n  }, {\n    key: \"readUint16\",\n    value: function readUint16() {\n      return _parseInt(reverseHex(this.read(2)), 16);\n    }\n    /**\n     * Read 4 bytes as uint32 in littleEndian\n     */\n\n  }, {\n    key: \"readUint32\",\n    value: function readUint32() {\n      return _parseInt(reverseHex(this.read(4)), 16);\n    }\n    /**\n     * Read 4 bytes as int in littleEndian\n     */\n\n  }, {\n    key: \"readInt\",\n    value: function readInt() {\n      return _parseInt(reverseHex(this.read(4)), 16);\n    }\n    /**\n     * Read 8 bytes as long in littleEndian\n     */\n\n  }, {\n    key: \"readLong\",\n    value: function readLong() {\n      return _parseInt(reverseHex(this.read(8)), 16);\n    }\n  }, {\n    key: \"readBoolean\",\n    value: function readBoolean() {\n      return _parseInt(this.read(1), 16) !== 0;\n    }\n  }]);\n\n  return StringReader;\n}();",{"version":3,"sources":["/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/common/classesUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { BigNumber } from \"bignumber.js\";\nimport { ERROR_CODE } from \"./error\";\nimport * as Long from \"long\";\nimport { bigIntToBytes, reverseHex } from \"./functionsUtils\";\n\nexport class resultParams{\n    name: string = '';\n    value: string = '';\n}\n\n\nexport class BigInt {\n    value: string | number;\n\n    constructor(value: string | number) {\n        const bi = new BigNumber(value);\n        if (!bi.isInteger() || bi.isNegative()) {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n        this.value = value;\n    }\n\n    /**\n     * Create BigInt from string\n     * @param hex Byte string value\n     */\n    static fromHexstr(hex: string): BigInt {\n        hex = reverseHex(hex);\n        const bi = new BigNumber(hex, 16).toString();\n        return new BigInt(bi);\n    }\n    /**\n     * Create hex string from BigInt\n     */\n    toHexstr(): string {\n        const bi = Long.fromValue(this.value);\n        const hex = bigIntToBytes(bi);\n        return hex;\n    }\n}\n\n\n\nexport class Fixed64 {\n    static deserialize(sr: StringReader) {\n        const f = new Fixed64();\n        let v = sr.read(8);\n        // f.value = hexstr2str(v)\n        v = reverseHex(v);\n        while (v.substr(0, 2) === '00' ) {\n            v = v.substring(2);\n        }\n        f.value = new BigNumber(v, 16).toString();\n        return f;\n    }\n\n    // 8 bytes\n    value: string;\n    constructor(value?: string) {\n        if (value && value.length > 16 || value && !/^[0-9]\\d*$/.test(value)) {\n            throw new Error('Invalid value.' + value);\n        }\n        this.value = value || '0000000000000000';\n    }\n\n    serialize() {\n        // return str2hexstr(this.value)\n        let hexstring = new BigNumber(this.value).toString(16);\n        const size = 8 * 2;\n\n        hexstring = hexstring.length % size === 0\n            ? hexstring\n            : ('0'.repeat(size) + hexstring).substring(hexstring.length);\n\n        hexstring = reverseHex(hexstring);\n        return hexstring;\n    }\n}\n\n\n\n/**\n * @class StringReader\n * @classdesc A string helper used to read given string as bytes.2 chars as one byte.\n * @param {string} str - The string to read.\n */\nexport class StringReader {\n    str: string;\n    pos: number;\n    size: number;\n    constructor(str = '') {\n        if (str.length % 2 !== 0) {\n            throw new Error('Param\\'s length is not even.');\n        }\n        this.str = str;\n        this.pos = 0;\n        this.size = this.str.length / 2;\n    }\n\n    /**\n     * Checks if reached the end of the string.\n     */\n    isEmpty() {\n        return this.pos >= this.str.length;\n    }\n\n    /**\n     * Reads some bytes.\n     * @param {number} bytes - Number of bytes to read\n     */\n    read(bytes: number) {\n        if (this.isEmpty()) {\n            throw new Error('StringReader reached the end.');\n        }\n        const out = this.str.substr(this.pos, bytes * 2);\n        this.pos += bytes * 2;\n        return out;\n    }\n\n    unreadBytes(bytes: number) {\n        if ( (this.pos - bytes * 2) < 0 ) {\n            throw new Error('Can not unread too many bytes.');\n        }\n        this.pos -= bytes * 2;\n        return;\n    }\n\n    /**\n     * Reads string terminated by NULL.\n     */\n    readNullTerminated(): string {\n        const index = this.str.indexOf('00', this.pos);\n        if (index === -1) {\n            throw new Error('No ending NULL found');\n        }\n\n        const out = this.str.substring(this.pos, index);\n        this.pos = index + 2;\n        return out;\n    }\n\n    /**\n     * First, read one byte as the length of bytes to read. Then read the following bytes.\n     */\n    readNextBytes() {\n        const bytesToRead = this.readNextLen();\n        if (bytesToRead === 0) {\n            return '';\n        }\n\n        return this.read(bytesToRead);\n    }\n\n    /**\n     * Reads one byte as int, which may indicates the length of following bytes to read.\n     * @returns {number}\n     */\n    readNextLen() {\n        let len = parseInt(this.read(1), 16);\n\n        if (len === 0xfd) {\n            len = parseInt(reverseHex(this.read(2)), 16);\n        } else if (len === 0xfe) {\n            len = parseInt(reverseHex(this.read(4)), 16);\n        } else if (len === 0xff) {\n            len = parseInt(reverseHex(this.read(8)), 16);\n        }\n\n        return len;\n    }\n\n    /**\n     * Read Uint8\n     */\n    readUint8() {\n        return parseInt(reverseHex(this.read(1)), 16);\n    }\n\n    /**\n     * read 2 bytes as uint16 in littleEndian\n     */\n    readUint16() {\n        return parseInt(reverseHex(this.read(2)), 16);\n    }\n\n    /**\n     * Read 4 bytes as uint32 in littleEndian\n     */\n    readUint32() {\n        return parseInt(reverseHex(this.read(4)), 16);\n    }\n\n    /**\n     * Read 4 bytes as int in littleEndian\n     */\n    readInt() {\n        return parseInt(reverseHex(this.read(4)), 16);\n    }\n\n    /**\n     * Read 8 bytes as long in littleEndian\n     */\n    readLong() {\n        return parseInt(reverseHex(this.read(8)), 16);\n    }\n\n    readBoolean() {\n        return parseInt(this.read(1), 16) !== 0;\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-3!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/nativeTransaction.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/nativeTransaction.ts","mtime":1556180418000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import { BigNumber } from 'bignumber.js';\nimport { Address } from \"../wallet/address\";\nimport { PrivateKey } from \"../crypto/privateKey\";\nimport { Struct, getTokenContract, verifyAmount, buildNativeCodeScript, makeNativeContractTx } from \"./transactionUtils\";\nimport { TxSignature } from \"./txSignature\";\nimport { ERROR_CODE } from \"../common/error\";\nexport function makeTransferTx(tokenType, from, to, amount, gasPrice, gasLimit, payer) {\n  verifyAmount(amount);\n  var num = new BigNumber(amount);\n  var struct = new Struct();\n  struct.add(from, to, num);\n  var list = [];\n  list.push([struct]);\n  var contract = getTokenContract(tokenType);\n  var params = buildNativeCodeScript(list);\n  var tx = makeNativeContractTx('transfer', params, contract, gasPrice, gasLimit);\n  tx.tokenType = tokenType;\n  tx.from = from;\n  tx.to = to;\n  tx.amount = amount;\n  tx.method = 'transfer';\n\n  if (payer) {\n    tx.payer = payer;\n  } else {\n    tx.payer = from;\n  }\n\n  return tx;\n}\nexport var signTransaction = function signTransaction(tx, privateKey, schema) {\n  var signature = TxSignature.create(tx, privateKey, schema);\n  tx.sigs = [signature];\n};\nexport function nativeTransfer(tokenType, from, to, amount, gasPrice, gasLimit, fromKey, payer) {\n  if (tokenType !== 'zpt' && tokenType !== 'gala') {\n    throw ERROR_CODE.INVALID_PARAMS;\n  }\n\n  var fromAddr = new Address(from);\n  var toAddr = new Address(to);\n  var tx;\n\n  if (!payer) {\n    tx = makeTransferTx(tokenType, fromAddr, toAddr, amount, gasPrice, gasLimit);\n  } else {\n    var payerAddr = new Address(payer);\n    tx = makeTransferTx(tokenType, fromAddr, toAddr, amount, gasPrice, gasLimit, payerAddr);\n  }\n\n  var fromPK = new PrivateKey(fromKey);\n  signTransaction(tx, fromPK);\n  return tx.serialize();\n}",null]}
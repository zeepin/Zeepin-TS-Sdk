{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-3!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/transactionUtils.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/transactionUtils.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _Array$isArray from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/array/is-array\";\nimport _getIterator from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { Fixed64 } from '../common/classesUtils';\nimport { BigNumber } from 'bignumber.js';\nimport { TOKEN_TYPE, ZPT_CONTRACT, GALA_CONTRACT, NATIVE_INVOKE_NAME } from \"../common/consts\";\nimport opcode from '../common/opCode';\nimport { pushHexString, pushInt, pushBigNum, pushBool } from \"../common/constsUtils\";\nimport { str2hexstr, num2hexstring } from \"../common/functionsUtils\";\nimport { Address } from \"../wallet/address\";\nimport { InvokeCode } from \"./payload\";\nimport { TxType, Transaction, Transfer } from \"./transaction\";\nexport var Struct =\n/*#__PURE__*/\nfunction () {\n  function Struct() {\n    _classCallCheck(this, Struct);\n\n    this.list = [];\n  }\n\n  _createClass(Struct, [{\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var _arr = args;\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var a = _arr[_i];\n        this.list.push(a);\n      }\n    }\n  }]);\n\n  return Struct;\n}();\nexport function getTokenContract(tokenType) {\n  if (tokenType === TOKEN_TYPE.ZPT) {\n    return new Address(ZPT_CONTRACT);\n  } else if (tokenType === TOKEN_TYPE.GALA) {\n    return new Address(GALA_CONTRACT);\n  } else {\n    throw new Error('Error token type.');\n  }\n}\nexport function verifyAmount(amount) {\n  var value = new BigNumber(amount);\n\n  if (!value.isInteger() || value.lte(new BigNumber(0))) {\n    throw new Error('Amount is invalid.');\n  }\n}\nexport function createCodeParamScript(obj) {\n  var result = '';\n\n  if (typeof obj === 'string') {\n    result += pushHexString(obj);\n  } else if (typeof obj === 'boolean') {\n    result += pushBool(obj);\n  } else if (typeof obj === 'number') {\n    result += pushInt(obj);\n  } else if (obj instanceof BigNumber) {\n    result += pushBigNum(obj);\n  } else if (obj instanceof Address) {\n    result += pushHexString(obj.serialize());\n  } else if (obj instanceof Struct) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(obj.list), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var v = _step.value;\n        result += createCodeParamScript(v);\n        result += num2hexstring(opcode.DUPFROMALTSTACK);\n        result += num2hexstring(opcode.SWAP);\n        result += num2hexstring(opcode.APPEND);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return result;\n}\nexport function buildNativeCodeScript(list) {\n  var result = '';\n\n  for (var i = list.length - 1; i >= 0; i--) {\n    var val = list[i]; // Consider string as hexstr\n\n    if (typeof val === 'string') {\n      result += pushHexString(val);\n    } else if (typeof val === 'boolean') {\n      result += pushBool(val);\n    } else if (typeof val === 'number') {\n      result += pushInt(val);\n    } else if (val instanceof BigNumber) {\n      result += pushBigNum(val);\n    } else if (val instanceof Address) {\n      result += pushHexString(val.serialize());\n    } else if (val instanceof Struct) {\n      result += pushInt(0);\n      result += num2hexstring(opcode.NEWSTRUCT);\n      result += num2hexstring(opcode.TOALTSTACK);\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _getIterator(val.list), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var v = _step2.value;\n          result += createCodeParamScript(v);\n          result += num2hexstring(opcode.DUPFROMALTSTACK);\n          result += num2hexstring(opcode.SWAP);\n          result += num2hexstring(opcode.APPEND);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      result += num2hexstring(opcode.FROMALTSTACK);\n    } else if (_Array$isArray(val)) {\n      result += buildNativeCodeScript(val);\n      result += pushInt(val.length);\n      result += num2hexstring(opcode.PACK);\n    }\n  }\n\n  return result;\n}\nexport function makeNativeContractTx(funcName, params, contractAddr, gasPrice, gasLimit, payer) {\n  var code = '';\n  code += params;\n  code += pushHexString(str2hexstr(funcName));\n  code += pushHexString(contractAddr.serialize());\n  code += pushInt(0);\n  code += num2hexstring(opcode.SYSCALL);\n  code += pushHexString(str2hexstr(NATIVE_INVOKE_NAME));\n  var payload = new InvokeCode();\n  payload.code = code;\n  var tx;\n\n  if (funcName === 'transfer' || funcName === 'transferFrom') {\n    tx = new Transfer();\n  } else {\n    tx = new Transaction();\n  }\n\n  tx.type = TxType.Invoke;\n  tx.payload = payload;\n\n  if (gasLimit) {\n    tx.gasLimit = new Fixed64(gasLimit);\n  }\n\n  if (gasPrice) {\n    tx.gasPrice = new Fixed64(gasPrice);\n  }\n\n  if (payer) {\n    tx.payer = payer;\n  }\n\n  return tx;\n}",null]}
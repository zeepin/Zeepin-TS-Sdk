{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-3!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/key.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/key.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport * as cryptoJS from 'crypto-js';\nimport { sha3_224, sha3_256, sha3_384, sha3_512 } from 'js-sha3';\nimport { hexstring2ab } from \"../common/functionsUtils\";\nimport { KeyType, KeyParameters } from \"./cryptoParams\";\nimport { SignatureScheme } from \"./cryptoParams\";\nimport { DEFAULT_ALGORITHM } from \"../common/consts\";\n/**\n * Common representation of private or public key\n */\n\nexport var Key =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates Key.\n   *\n   * If no algorithm or parameters are specified, default values will be used.\n   *\n   * @param key Hex encoded key value\n   * @param algorithm Key type\n   * @param parameters Parameters of the key type\n   */\n  function Key(key, algorithm, parameters) {\n    _classCallCheck(this, Key);\n\n    this.key = key;\n\n    if (algorithm === undefined) {\n      algorithm = KeyType.fromLabel(DEFAULT_ALGORITHM.algorithm);\n    }\n\n    if (parameters === undefined) {\n      parameters = KeyParameters.deserializeJson(DEFAULT_ALGORITHM.parameters);\n    }\n\n    this.algorithm = algorithm;\n    this.parameters = parameters;\n  }\n  /**\n   * Computes hash of message using hashing function of signature schema.\n   *\n   * @param msg Hex encoded input data\n   * @param scheme Signing schema to use\n   */\n\n\n  _createClass(Key, [{\n    key: \"computeHash\",\n    value: function computeHash(msg, scheme) {\n      switch (scheme) {\n        case SignatureScheme.ECDSAwithSHA224:\n          return cryptoJS.SHA224(cryptoJS.enc.Hex.parse(msg)).toString();\n\n        case SignatureScheme.ECDSAwithSHA256:\n          return cryptoJS.SHA256(cryptoJS.enc.Hex.parse(msg)).toString();\n\n        case SignatureScheme.ECDSAwithSHA384:\n          return cryptoJS.SHA384(cryptoJS.enc.Hex.parse(msg)).toString();\n\n        case SignatureScheme.ECDSAwithSHA512:\n        case SignatureScheme.EDDSAwithSHA512:\n          return cryptoJS.SHA512(cryptoJS.enc.Hex.parse(msg)).toString();\n\n        case SignatureScheme.ECDSAwithSHA3_224:\n          return sha3_224(hexstring2ab(msg));\n\n        case SignatureScheme.ECDSAwithSHA3_256:\n          return sha3_256(hexstring2ab(msg));\n\n        case SignatureScheme.ECDSAwithSHA3_384:\n          return sha3_384(hexstring2ab(msg));\n\n        case SignatureScheme.ECDSAwithSHA3_512:\n          return sha3_512(hexstring2ab(msg));\n\n        case SignatureScheme.ECDSAwithRIPEMD160:\n          return cryptoJS.RIPEMD160(cryptoJS.enc.Hex.parse(msg)).toString();\n        //case SignatureScheme.SM2withSM3:\n        //return (new sm3()).sum(hexstring2ab(msg), 'hex');\n\n        default:\n          throw new Error('Unsupported hash algorithm.');\n      }\n    }\n    /**\n     * Tests if signing schema is compatible with key type.\n     *\n     * @param schema Signing schema to use\n     */\n\n  }, {\n    key: \"isSchemaSupported\",\n    value: function isSchemaSupported(schema) {\n      switch (schema) {\n        case SignatureScheme.ECDSAwithSHA224:\n        case SignatureScheme.ECDSAwithSHA256:\n        case SignatureScheme.ECDSAwithSHA384:\n        case SignatureScheme.ECDSAwithSHA512:\n        case SignatureScheme.ECDSAwithSHA3_224:\n        case SignatureScheme.ECDSAwithSHA3_256:\n        case SignatureScheme.ECDSAwithSHA3_384:\n        case SignatureScheme.ECDSAwithSHA3_512:\n        case SignatureScheme.ECDSAwithRIPEMD160:\n          return this.algorithm === KeyType.ECDSA;\n\n        case SignatureScheme.EDDSAwithSHA512:\n          return this.algorithm === KeyType.EDDSA;\n        //case SignatureScheme.SM2withSM3:\n        //return this.algorithm === KeyType.SM2;\n\n        default:\n          throw new Error('Unsupported signature schema.');\n      }\n    }\n    /**\n     * Gets JSON representation of the Key (Public/Private).\n     */\n\n  }, {\n    key: \"serializeJson\",\n    value: function serializeJson() {\n      return {\n        algorithm: this.algorithm.label,\n        parameters: this.parameters.serializeJson(),\n        key: this.key\n      };\n    }\n  }]);\n\n  return Key;\n}();",null]}
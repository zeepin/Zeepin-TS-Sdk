{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-3!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/cryptoParams.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/cryptoParams.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nexport var Curve =\n/*#__PURE__*/\nfunction () {\n  function Curve(label, hex, preset) {\n    _classCallCheck(this, Curve);\n\n    this.label = label;\n    this.hex = hex;\n    this.preset = preset;\n    Curve.values.push(this);\n  }\n  /**\n   * Finds Curvecorresponding to specified hex representation.\n   *\n   * @param hex Byte hex value\n   */\n\n\n  _createClass(Curve, null, [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      var item = Curve.values.find(function (v) {\n        return v.hex === hex;\n      });\n\n      if (item === undefined) {\n        throw new Error('Enum value not found');\n      }\n\n      return item;\n    }\n    /**\n     * Finds Curve corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n\n  }, {\n    key: \"fromLabel\",\n    value: function fromLabel(label) {\n      var item = Curve.values.find(function (v) {\n        return v.label === label;\n      });\n\n      if (item === undefined) {\n        throw new Error('Enum value not found');\n      }\n\n      return item;\n    }\n  }]);\n\n  return Curve;\n}();\nCurve.values = [];\nCurve.SECP224R1 = new Curve('P-224', 1, 'p224');\nCurve.SECP256R1 = new Curve('P-256', 2, 'p256');\nCurve.SECP384R1 = new Curve('P-384', 3, 'p384');\nCurve.SECP521R1 = new Curve('P-521', 4, 'p521');\nCurve.SM2P256V1 = new Curve('sm2p256v1', 20, 'sm2p256v1');\nCurve.ED25519 = new Curve('ed25519', 25, 'ed25519');\nexport var SignatureScheme =\n/*#__PURE__*/\nfunction () {\n  function SignatureScheme(label, hex, labelJWS) {\n    _classCallCheck(this, SignatureScheme);\n\n    this.label = label;\n    this.hex = hex;\n    this.labelJWS = labelJWS;\n    SignatureScheme.values.push(this);\n  }\n  /**\n   * Finds Signature schema corresponding to specified hex representation.\n   *\n   * @param hex Byte hex value\n   */\n\n\n  _createClass(SignatureScheme, null, [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      var item = SignatureScheme.values.find(function (v) {\n        return v.hex === hex;\n      });\n\n      if (item === undefined) {\n        throw new Error('Enum value not found');\n      }\n\n      return item;\n    }\n    /**\n     * Finds Signature schema corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n\n  }, {\n    key: \"fromLabel\",\n    value: function fromLabel(label) {\n      var item = SignatureScheme.values.find(function (v) {\n        return v.label === label;\n      });\n\n      if (item === undefined) {\n        throw new Error('Enum value not found');\n      }\n\n      return item;\n    }\n    /**\n     * Finds Signature schema corresponding to specified label representation in JWS.\n     *\n     * @param label Label\n     */\n\n  }, {\n    key: \"fromLabelJWS\",\n    value: function fromLabelJWS(label) {\n      var item = SignatureScheme.values.find(function (v) {\n        return v.labelJWS === label;\n      });\n\n      if (item === undefined) {\n        throw new Error('Enum value not found');\n      }\n\n      return item;\n    }\n  }]);\n\n  return SignatureScheme;\n}();\nSignatureScheme.values = [];\nSignatureScheme.ECDSAwithSHA224 = new SignatureScheme('SHA224withECDSA', 0, 'ES224');\nSignatureScheme.ECDSAwithSHA256 = new SignatureScheme('SHA256withECDSA', 1, 'ES256');\nSignatureScheme.ECDSAwithSHA384 = new SignatureScheme('SHA384withECDSA', 2, 'ES384');\nSignatureScheme.ECDSAwithSHA512 = new SignatureScheme('SHA512withECDSA', 3, 'ES512'); // tslint:disable-next-line:variable-name\n\nSignatureScheme.ECDSAwithSHA3_224 = new SignatureScheme('SHA3-224withECDSA', 4, 'ES3-224'); // tslint:disable-next-line:variable-name\n\nSignatureScheme.ECDSAwithSHA3_256 = new SignatureScheme('SHA3-256withECDSA', 5, 'ES3-256'); // tslint:disable-next-line:variable-name\n\nSignatureScheme.ECDSAwithSHA3_384 = new SignatureScheme('SHA3-384withECDSA', 6, 'ES3-384'); // tslint:disable-next-line:variable-name\n\nSignatureScheme.ECDSAwithSHA3_512 = new SignatureScheme('SHA3-512withECDSA', 7, 'ES3-512');\nSignatureScheme.ECDSAwithRIPEMD160 = new SignatureScheme('RIPEMD160withECDSA', 8, 'ER160');\nSignatureScheme.SM2withSM3 = new SignatureScheme('SM3withSM2', 9, 'SM');\nSignatureScheme.EDDSAwithSHA512 = new SignatureScheme('SHA512withEdDSA', 10, 'EDS512');\nexport var KeyType =\n/*#__PURE__*/\nfunction () {\n  function KeyType(label, hex, defaultSchema) {\n    _classCallCheck(this, KeyType);\n\n    this.label = label;\n    this.hex = hex;\n    this.defaultSchema = defaultSchema;\n    KeyType.values.push(this);\n  }\n  /**\n   * Finds Key type corresponding to specified hex representation.\n   *\n   * @param hex Byte hex value\n   */\n\n\n  _createClass(KeyType, null, [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      var item = KeyType.values.find(function (v) {\n        return v.hex === hex;\n      });\n\n      if (item === undefined) {\n        throw new Error('Enum value not found');\n      }\n\n      return item;\n    }\n    /**\n     * Finds Key type corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n\n  }, {\n    key: \"fromLabel\",\n    value: function fromLabel(label) {\n      var item = KeyType.values.find(function (v) {\n        return v.label === label;\n      });\n\n      if (item === undefined) {\n        throw new Error('Enum value not found');\n      }\n\n      return item;\n    }\n  }]);\n\n  return KeyType;\n}();\nKeyType.values = [];\nKeyType.ECDSA = new KeyType('ECDSA', 0x12, SignatureScheme.ECDSAwithSHA256);\nKeyType.SM2 = new KeyType('SM2', 0x13, SignatureScheme.SM2withSM3);\nKeyType.EDDSA = new KeyType('EDDSA', 0x14, SignatureScheme.EDDSAwithSHA512);\nexport var KeyParameters =\n/*#__PURE__*/\nfunction () {\n  function KeyParameters(curve) {\n    _classCallCheck(this, KeyParameters);\n\n    this.curve = curve;\n  }\n  /**\n   * Create KeyParameters from json.\n   * @param json JsonKeyParameters\n   */\n\n\n  _createClass(KeyParameters, [{\n    key: \"serializeJson\",\n\n    /**\n     * Serialize KeyParameters to json.\n     */\n    value: function serializeJson() {\n      return {\n        curve: this.curve.label\n      };\n    }\n  }], [{\n    key: \"deserializeJson\",\n    value: function deserializeJson(json) {\n      return new KeyParameters(Curve.fromLabel(json.curve));\n    }\n  }]);\n\n  return KeyParameters;\n}();",null]}
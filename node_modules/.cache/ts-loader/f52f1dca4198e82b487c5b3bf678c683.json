{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-2!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/txSignature.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/txSignature.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { hex2VarBytes } from \"../common/functionsUtils\";\nimport { getParamsFromProgram, getProgramInfo, programFromParams, programFromPubKey, programFromMultiPubKey } from \"../crypto/programs\";\nexport var TxSignature =\n/*#__PURE__*/\nfunction () {\n  function TxSignature() {\n    _classCallCheck(this, TxSignature);\n\n    /**\n     * Public keys used to create this signature.\n     */\n    this.pubKeys = []; // Cardinality of the signature\n\n    this.M = 1; // Signature values\n\n    this.sigData = [];\n  }\n\n  _createClass(TxSignature, [{\n    key: \"serialize\",\n\n    /**\n     * Serializes signature to Hex representation.\n     *\n     */\n    value: function serialize() {\n      var result = '';\n      var invocationScript = programFromParams(this.sigData);\n      var verificationScript = '';\n\n      if (this.pubKeys.length === 0) {\n        throw new Error('No pubkeys in sig');\n      } else if (this.pubKeys.length === 1) {\n        verificationScript = programFromPubKey(this.pubKeys[0]);\n      } else {\n        verificationScript = programFromMultiPubKey(this.pubKeys, this.M);\n      }\n\n      result += hex2VarBytes(invocationScript);\n      result += hex2VarBytes(verificationScript);\n      return result;\n    }\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(sr) {\n      var sig = new TxSignature();\n      var invocationScript = sr.readNextBytes();\n      var verificationScript = sr.readNextBytes();\n      var sigData = getParamsFromProgram(invocationScript);\n      var info = getProgramInfo(verificationScript);\n      sig.M = info.M;\n      sig.pubKeys = info.pubKeys;\n      sig.sigData = sigData;\n      return sig;\n    }\n    /**\n     * Creates Transaction signature of hash with supplied private key and scheme.\n     *\n     * If the signature schemas is not provided, the default schemes for the key types are used.\n     *\n     * @param hash hash of the transaction or signable transaction\n     * @param privateKey Private key to use\n     * @param scheme Signature scheme to use\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(hash, privateKey, scheme) {\n      var signature = new TxSignature();\n      signature.M = 1;\n      signature.pubKeys = [privateKey.getPublicKey()];\n      signature.sigData = [privateKey.sign(hash, scheme).serializeHex()];\n      return signature;\n    }\n  }]);\n\n  return TxSignature;\n}();",{"version":3,"sources":["/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/txSignature.ts"],"names":[],"mappings":";;AACA,SAAS,YAAT,QAA6B,0BAA7B;AAEA,SAAS,oBAAT,EAA+B,cAA/B,EAA+C,iBAA/C,EAAkE,iBAAlE,EAAqF,sBAArF,QAAmH,oBAAnH;AAKA,WAAa,WAAb;AAAA;AAAA;AAAA,yBAAA;AAAA;;AACI;;;AAGA,SAAA,OAAA,GAAuB,EAAvB,CAJJ,CAMI;;AACA,SAAA,CAAA,GAAY,CAAZ,CAPJ,CASI;;AACA,SAAA,OAAA,GAAoB,EAApB;AAsDH;;AAhED;AAAA;;AA6CI;;;;AA7CJ,gCAiDa;AACL,UAAI,MAAM,GAAG,EAAb;AACA,UAAM,gBAAgB,GAAG,iBAAiB,CAAC,KAAK,OAAN,CAA1C;AACA,UAAI,kBAAkB,GAAG,EAAzB;;AACA,UAAI,KAAK,OAAL,CAAa,MAAb,KAAwB,CAA5B,EAA+B;AAC3B,cAAM,IAAI,KAAJ,CAAU,mBAAV,CAAN;AACH,OAFD,MAEO,IAAI,KAAK,OAAL,CAAa,MAAb,KAAwB,CAA5B,EAA+B;AAClC,QAAA,kBAAkB,GAAG,iBAAiB,CAAC,KAAK,OAAL,CAAa,CAAb,CAAD,CAAtC;AACH,OAFM,MAEA;AACH,QAAA,kBAAkB,GAAG,sBAAsB,CAAC,KAAK,OAAN,EAAe,KAAK,CAApB,CAA3C;AACH;;AACD,MAAA,MAAM,IAAI,YAAY,CAAC,gBAAD,CAAtB;AACA,MAAA,MAAM,IAAI,YAAY,CAAC,kBAAD,CAAtB;AACA,aAAO,MAAP;AACH;AA/DL;AAAA;AAAA,gCAauB,EAbvB,EAauC;AAC/B,UAAM,GAAG,GAAG,IAAI,WAAJ,EAAZ;AACA,UAAM,gBAAgB,GAAG,EAAE,CAAC,aAAH,EAAzB;AACA,UAAM,kBAAkB,GAAG,EAAE,CAAC,aAAH,EAA3B;AACA,UAAM,OAAO,GAAG,oBAAoB,CAAC,gBAAD,CAApC;AACA,UAAM,IAAI,GAAG,cAAc,CAAC,kBAAD,CAA3B;AACA,MAAA,GAAG,CAAC,CAAJ,GAAQ,IAAI,CAAC,CAAb;AACA,MAAA,GAAG,CAAC,OAAJ,GAAc,IAAI,CAAC,OAAnB;AACA,MAAA,GAAG,CAAC,OAAJ,GAAc,OAAd;AACA,aAAO,GAAP;AACH;AAED;;;;;;;;;;AAzBJ;AAAA;AAAA,2BAkCkB,IAlClB,EAkC2C,UAlC3C,EAkCmE,MAlCnE,EAkC2F;AACnF,UAAM,SAAS,GAAG,IAAI,WAAJ,EAAlB;AAEA,MAAA,SAAS,CAAC,CAAV,GAAc,CAAd;AACA,MAAA,SAAS,CAAC,OAAV,GAAoB,CAAC,UAAU,CAAC,YAAX,EAAD,CAApB;AACA,MAAA,SAAS,CAAC,OAAV,GAAoB,CAAC,UAAU,CAAC,IAAX,CAAgB,IAAhB,EAAsB,MAAtB,EAA8B,YAA9B,EAAD,CAApB;AAEA,aAAO,SAAP;AACH;AA1CL;;AAAA;AAAA","sourcesContent":["import { StringReader } from \"../common/classesUtils\";\nimport { hex2VarBytes } from \"../common/functionsUtils\";\nimport { SignatureScheme } from \"../crypto/cryptoParams\";\nimport { getParamsFromProgram, getProgramInfo, programFromParams, programFromPubKey, programFromMultiPubKey } from \"../crypto/programs\";\nimport { PrivateKey } from \"../crypto/privateKey\";\nimport { PublicKey } from \"../crypto/publicKey\";\nimport { Signable } from \"../crypto/signable\";\n\nexport class TxSignature {\n    /**\n     * Public keys used to create this signature.\n     */\n    pubKeys: PublicKey[] = [];\n\n    // Cardinality of the signature\n    M: number = 1;\n\n    // Signature values\n    sigData: string[] = [];\n\n\n    static deserialize(sr: StringReader) {\n        const sig = new TxSignature();\n        const invocationScript = sr.readNextBytes();\n        const verificationScript = sr.readNextBytes();\n        const sigData = getParamsFromProgram(invocationScript);\n        const info = getProgramInfo(verificationScript);\n        sig.M = info.M;\n        sig.pubKeys = info.pubKeys;\n        sig.sigData = sigData;\n        return sig;\n    }\n\n    /**\n     * Creates Transaction signature of hash with supplied private key and scheme.\n     *\n     * If the signature schemas is not provided, the default schemes for the key types are used.\n     *\n     * @param hash hash of the transaction or signable transaction\n     * @param privateKey Private key to use\n     * @param scheme Signature scheme to use\n     */\n    static create(hash: string | Signable, privateKey: PrivateKey, scheme?: SignatureScheme) {\n        const signature = new TxSignature();\n\n        signature.M = 1;\n        signature.pubKeys = [privateKey.getPublicKey()];\n        signature.sigData = [privateKey.sign(hash, scheme).serializeHex()];\n\n        return signature;\n    }\n\n\n    /**\n     * Serializes signature to Hex representation.\n     *\n     */\n    serialize(): string {\n        let result = '';\n        const invocationScript = programFromParams(this.sigData);\n        let verificationScript = '';\n        if (this.pubKeys.length === 0) {\n            throw new Error('No pubkeys in sig');\n        } else if (this.pubKeys.length === 1) {\n            verificationScript = programFromPubKey(this.pubKeys[0]);\n        } else {\n            verificationScript = programFromMultiPubKey(this.pubKeys, this.M);\n        }\n        result += hex2VarBytes(invocationScript);\n        result += hex2VarBytes(verificationScript);\n        return result;\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-3!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/transaction.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/transaction.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _possibleConstructorReturn from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _parseInt from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport * as cryptoJS from 'crypto-js';\nimport { Fixed64, StringReader } from \"../common/classesUtils\";\nimport { randomBytes, num2hexstring } from \"../common/functionsUtils\";\nimport { Address } from \"../wallet/address\";\nimport { InvokeCode } from \"./payload\";\nimport { TxSignature } from \"./txSignature\";\nexport var TxType;\n\n(function (TxType) {\n  TxType[TxType[\"BookKeeper\"] = 2] = \"BookKeeper\";\n  TxType[TxType[\"Claim\"] = 3] = \"Claim\";\n  TxType[TxType[\"Deploy\"] = 208] = \"Deploy\";\n  TxType[TxType[\"Invoke\"] = 209] = \"Invoke\";\n  TxType[TxType[\"Enrollment\"] = 4] = \"Enrollment\";\n  TxType[TxType[\"Vote\"] = 5] = \"Vote\";\n})(TxType || (TxType = {}));\n\nexport var Transaction =\n/*#__PURE__*/\nfunction () {\n  function Transaction() {\n    _classCallCheck(this, Transaction);\n\n    this.type = 0xd1;\n    this.version = 0x00;\n    this.txAttributes = 0x00;\n    this.sigs = [];\n    this.payload = new InvokeCode();\n    this.nonce = randomBytes(4);\n    this.gasPrice = new Fixed64();\n    this.gasLimit = new Fixed64();\n    this.payer = new Address('0000000000000000000000000000000000000000');\n  }\n\n  _createClass(Transaction, [{\n    key: \"serialize\",\n\n    /**\n     * Serialize transaction to hex string\n     * The result is used to send to blockchain.\n     */\n    value: function serialize() {\n      var unsigned = this.serializeUnsignedData();\n      var signed = this.serializeSignedData();\n      return unsigned + signed;\n    }\n    /**\n     * Serialize transaction data exclueds signatures\n     */\n\n  }, {\n    key: \"serializeUnsignedData\",\n    value: function serializeUnsignedData() {\n      var result = '';\n      result += num2hexstring(this.version);\n      result += num2hexstring(this.type); // nonce 4bytes\n\n      result += this.nonce;\n      result += this.gasPrice.serialize();\n      result += this.gasLimit.serialize();\n      result += this.payer.serialize();\n      result += this.payload.serialize();\n      result += num2hexstring(this.txAttributes);\n      return result;\n    }\n    /**\n     * Serialize signatures\n     */\n\n  }, {\n    key: \"serializeSignedData\",\n    value: function serializeSignedData() {\n      var result = ''; // programs\n\n      result += num2hexstring(this.sigs.length); // tslint:disable-next-line:prefer-for-of\n\n      for (var i = 0; i < this.sigs.length; i++) {\n        result += this.sigs[i].serialize();\n      }\n\n      return result;\n    }\n    /**\n     * Get the signable content\n     */\n\n  }, {\n    key: \"getSignContent\",\n    value: function getSignContent() {\n      var data = this.serializeUnsignedData();\n      var ProgramHexString = cryptoJS.enc.Hex.parse(data);\n      var ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\n      var ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\n      return ProgramSha2562;\n    }\n    /**\n     * Get the hash of transaction\n     * @deprecated Use getSignContent instead\n     */\n\n  }, {\n    key: \"getHash\",\n    value: function getHash() {\n      return this.getSignContent();\n    }\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(hexstring) {\n      var tx = new Transaction();\n      var ss = new StringReader(hexstring);\n      tx.version = _parseInt(ss.read(1), 16);\n      tx.type = _parseInt(ss.read(1), 16);\n      tx.nonce = ss.read(4);\n      tx.gasPrice = Fixed64.deserialize(ss);\n      tx.gasLimit = Fixed64.deserialize(ss);\n      tx.payer = new Address(ss.read(20));\n      var payload;\n\n      switch (tx.type) {\n        case TxType.Invoke:\n          payload = new InvokeCode();\n          break;\n        // case TxType.Deploy:\n        //     payload = new DeployCode();\n        //     break;\n\n        default:\n          payload = new InvokeCode();\n      }\n\n      payload.deserialize(ss);\n      tx.payload = payload;\n      tx.txAttributes = _parseInt(ss.read(1), 16);\n      tx.sigs = [];\n      var sigLength = ss.readNextLen();\n\n      for (var i = 0; i < sigLength; i++) {\n        tx.sigs.push(TxSignature.deserialize(ss));\n      }\n\n      return tx;\n    }\n  }]);\n\n  return Transaction;\n}();\nexport var Transfer =\n/*#__PURE__*/\nfunction (_Transaction) {\n  _inherits(Transfer, _Transaction);\n\n  function Transfer() {\n    _classCallCheck(this, Transfer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Transfer).call(this));\n  }\n\n  return Transfer;\n}(Transaction);",null]}
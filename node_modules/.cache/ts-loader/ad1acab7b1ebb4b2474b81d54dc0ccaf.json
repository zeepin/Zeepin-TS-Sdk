{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-2!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/transaction.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/transaction.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _possibleConstructorReturn from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _parseInt from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport * as cryptoJS from 'crypto-js';\nimport { Fixed64, StringReader } from \"../common/classesUtils\";\nimport { randomBytes, num2hexstring } from \"../common/functionsUtils\";\nimport { Address } from \"../wallet/address\";\nimport { InvokeCode } from \"./payload\";\nimport { TxSignature } from \"./txSignature\";\nexport var TxType;\n\n(function (TxType) {\n  TxType[TxType[\"BookKeeper\"] = 2] = \"BookKeeper\";\n  TxType[TxType[\"Claim\"] = 3] = \"Claim\";\n  TxType[TxType[\"Deploy\"] = 208] = \"Deploy\";\n  TxType[TxType[\"Invoke\"] = 209] = \"Invoke\";\n  TxType[TxType[\"Enrollment\"] = 4] = \"Enrollment\";\n  TxType[TxType[\"Vote\"] = 5] = \"Vote\";\n})(TxType || (TxType = {}));\n\nexport var Transaction =\n/*#__PURE__*/\nfunction () {\n  function Transaction() {\n    _classCallCheck(this, Transaction);\n\n    this.type = 0xd1;\n    this.version = 0x00;\n    this.txAttributes = 0x00;\n    this.sigs = [];\n    this.payload = new InvokeCode();\n    this.nonce = randomBytes(4);\n    this.gasPrice = new Fixed64();\n    this.gasLimit = new Fixed64();\n    this.payer = new Address('0000000000000000000000000000000000000000');\n  }\n\n  _createClass(Transaction, [{\n    key: \"serialize\",\n\n    /**\n     * Serialize transaction to hex string\n     * The result is used to send to blockchain.\n     */\n    value: function serialize() {\n      var unsigned = this.serializeUnsignedData();\n      var signed = this.serializeSignedData();\n      return unsigned + signed;\n    }\n    /**\n     * Serialize transaction data exclueds signatures\n     */\n\n  }, {\n    key: \"serializeUnsignedData\",\n    value: function serializeUnsignedData() {\n      var result = '';\n      result += num2hexstring(this.version);\n      result += num2hexstring(this.type); // nonce 4bytes\n\n      result += this.nonce;\n      result += this.gasPrice.serialize();\n      result += this.gasLimit.serialize();\n      result += this.payer.serialize();\n      result += this.payload.serialize();\n      result += num2hexstring(this.txAttributes);\n      return result;\n    }\n    /**\n     * Serialize signatures\n     */\n\n  }, {\n    key: \"serializeSignedData\",\n    value: function serializeSignedData() {\n      var result = ''; // programs\n\n      result += num2hexstring(this.sigs.length); // tslint:disable-next-line:prefer-for-of\n\n      for (var i = 0; i < this.sigs.length; i++) {\n        result += this.sigs[i].serialize();\n      }\n\n      return result;\n    }\n    /**\n     * Get the signable content\n     */\n\n  }, {\n    key: \"getSignContent\",\n    value: function getSignContent() {\n      var data = this.serializeUnsignedData();\n      var ProgramHexString = cryptoJS.enc.Hex.parse(data);\n      var ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\n      var ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\n      return ProgramSha2562;\n    }\n    /**\n     * Get the hash of transaction\n     * @deprecated Use getSignContent instead\n     */\n\n  }, {\n    key: \"getHash\",\n    value: function getHash() {\n      return this.getSignContent();\n    }\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(hexstring) {\n      var tx = new Transaction();\n      var ss = new StringReader(hexstring);\n      tx.version = _parseInt(ss.read(1), 16);\n      tx.type = _parseInt(ss.read(1), 16);\n      tx.nonce = ss.read(4);\n      tx.gasPrice = Fixed64.deserialize(ss);\n      tx.gasLimit = Fixed64.deserialize(ss);\n      tx.payer = new Address(ss.read(20));\n      var payload;\n\n      switch (tx.type) {\n        case TxType.Invoke:\n          payload = new InvokeCode();\n          break;\n        // case TxType.Deploy:\n        //     payload = new DeployCode();\n        //     break;\n\n        default:\n          payload = new InvokeCode();\n      }\n\n      payload.deserialize(ss);\n      tx.payload = payload;\n      tx.txAttributes = _parseInt(ss.read(1), 16);\n      tx.sigs = [];\n      var sigLength = ss.readNextLen();\n\n      for (var i = 0; i < sigLength; i++) {\n        tx.sigs.push(TxSignature.deserialize(ss));\n      }\n\n      return tx;\n    }\n  }]);\n\n  return Transaction;\n}();\nexport var Transfer =\n/*#__PURE__*/\nfunction (_Transaction) {\n  _inherits(Transfer, _Transaction);\n\n  function Transfer() {\n    _classCallCheck(this, Transfer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Transfer).call(this));\n  }\n\n  return Transfer;\n}(Transaction);",{"version":3,"sources":["/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/transaction.ts"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,KAAK,QAAZ,MAA0B,WAA1B;AACA,SAAS,OAAT,EAAkB,YAAlB,QAAsC,wBAAtC;AACA,SAAS,WAAT,EAAsB,aAAtB,QAA2C,0BAA3C;AACA,SAAS,OAAT,QAAwB,mBAAxB;AACA,SAAkB,UAAlB,QAAoC,WAApC;AAEA,SAAS,WAAT,QAA4B,eAA5B;AAEA,OAAA,IAAY,MAAZ;;AAAA,CAAA,UAAY,MAAZ,EAAkB;AACd,EAAA,MAAA,CAAA,MAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACA,EAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA,EAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAA;AACA,EAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,GAAA,CAAA,GAAA,QAAA;AACA,EAAA,MAAA,CAAA,MAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACA,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACH,CAPD,EAAY,MAAM,KAAN,MAAM,GAAA,EAAA,CAAlB;;AASA,WAAa,WAAb;AAAA;AAAA;AAWI,yBAAA;AAAA;;AAVA,SAAA,IAAA,GAAe,IAAf;AACA,SAAA,OAAA,GAAkB,IAAlB;AAGA,SAAA,YAAA,GAAuB,IAAvB;AAIA,SAAA,IAAA,GAAsB,EAAtB;AAGI,SAAK,OAAL,GAAe,IAAI,UAAJ,EAAf;AACA,SAAK,KAAL,GAAa,WAAW,CAAC,CAAD,CAAxB;AACA,SAAK,QAAL,GAAgB,IAAI,OAAJ,EAAhB;AACA,SAAK,QAAL,GAAgB,IAAI,OAAJ,EAAhB;AACA,SAAK,KAAL,GAAa,IAAI,OAAJ,CAAY,0CAAZ,CAAb;AACH;;AAjBL;AAAA;;AAsDI;;;;AAtDJ,gCA0Da;AACL,UAAM,QAAQ,GAAG,KAAK,qBAAL,EAAjB;AACA,UAAM,MAAM,GAAG,KAAK,mBAAL,EAAf;AAEA,aAAO,QAAQ,GAAG,MAAlB;AACH;AAED;;;;AAjEJ;AAAA;AAAA,4CAoEyB;AACjB,UAAI,MAAM,GAAG,EAAb;AACA,MAAA,MAAM,IAAI,aAAa,CAAC,KAAK,OAAN,CAAvB;AACA,MAAA,MAAM,IAAI,aAAa,CAAC,KAAK,IAAN,CAAvB,CAHiB,CAKjB;;AACA,MAAA,MAAM,IAAI,KAAK,KAAf;AACA,MAAA,MAAM,IAAI,KAAK,QAAL,CAAc,SAAd,EAAV;AACA,MAAA,MAAM,IAAI,KAAK,QAAL,CAAc,SAAd,EAAV;AACA,MAAA,MAAM,IAAI,KAAK,KAAL,CAAW,SAAX,EAAV;AACA,MAAA,MAAM,IAAI,KAAK,OAAL,CAAa,SAAb,EAAV;AAEA,MAAA,MAAM,IAAI,aAAa,CAAC,KAAK,YAAN,CAAvB;AAEA,aAAO,MAAP;AACH;AAED;;;;AArFJ;AAAA;AAAA,0CAwFuB;AACf,UAAI,MAAM,GAAG,EAAb,CADe,CAEf;;AACA,MAAA,MAAM,IAAI,aAAa,CAAC,KAAK,IAAL,CAAU,MAAX,CAAvB,CAHe,CAIf;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,IAAL,CAAU,MAA9B,EAAsC,CAAC,EAAvC,EAA2C;AACvC,QAAA,MAAM,IAAI,KAAK,IAAL,CAAU,CAAV,EAAa,SAAb,EAAV;AACH;;AAED,aAAO,MAAP;AACH;AAED;;;;AApGJ;AAAA;AAAA,qCAuGkB;AACV,UAAM,IAAI,GAAG,KAAK,qBAAL,EAAb;AAEA,UAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAT,CAAa,GAAb,CAAiB,KAAjB,CAAuB,IAAvB,CAAzB;AACA,UAAM,aAAa,GAAG,QAAQ,CAAC,MAAT,CAAgB,gBAAhB,EAAkC,QAAlC,EAAtB;AACA,UAAM,cAAc,GAAG,QAAQ,CAAC,MAAT,CAAgB,QAAQ,CAAC,GAAT,CAAa,GAAb,CAAiB,KAAjB,CAAuB,aAAvB,CAAhB,EAAuD,QAAvD,EAAvB;AAEA,aAAO,cAAP;AACH;AAED;;;;;AAjHJ;AAAA;AAAA,8BAqHW;AACH,aAAO,KAAK,cAAL,EAAP;AACH;AAvHL;AAAA;AAAA,gCAmBuB,SAnBvB,EAmBwC;AAChC,UAAM,EAAE,GAAG,IAAI,WAAJ,EAAX;AACA,UAAM,EAAE,GAAG,IAAI,YAAJ,CAAiB,SAAjB,CAAX;AAEA,MAAA,EAAE,CAAC,OAAH,GAAa,UAAS,EAAE,CAAC,IAAH,CAAQ,CAAR,CAAT,EAAqB,EAArB,CAAb;AACA,MAAA,EAAE,CAAC,IAAH,GAAU,UAAS,EAAE,CAAC,IAAH,CAAQ,CAAR,CAAT,EAAqB,EAArB,CAAV;AACA,MAAA,EAAE,CAAC,KAAH,GAAW,EAAE,CAAC,IAAH,CAAQ,CAAR,CAAX;AACA,MAAA,EAAE,CAAC,QAAH,GAAc,OAAO,CAAC,WAAR,CAAoB,EAApB,CAAd;AACA,MAAA,EAAE,CAAC,QAAH,GAAc,OAAO,CAAC,WAAR,CAAoB,EAApB,CAAd;AACA,MAAA,EAAE,CAAC,KAAH,GAAW,IAAI,OAAJ,CAAY,EAAE,CAAC,IAAH,CAAQ,EAAR,CAAZ,CAAX;AAEA,UAAI,OAAJ;;AACA,cAAQ,EAAE,CAAC,IAAX;AACI,aAAK,MAAM,CAAC,MAAZ;AACI,UAAA,OAAO,GAAG,IAAI,UAAJ,EAAV;AACA;AACJ;AACA;AACA;;AACA;AACI,UAAA,OAAO,GAAG,IAAI,UAAJ,EAAV;AARR;;AAUA,MAAA,OAAO,CAAC,WAAR,CAAoB,EAApB;AACA,MAAA,EAAE,CAAC,OAAH,GAAa,OAAb;AACA,MAAA,EAAE,CAAC,YAAH,GAAkB,UAAS,EAAE,CAAC,IAAH,CAAQ,CAAR,CAAT,EAAqB,EAArB,CAAlB;AACA,MAAA,EAAE,CAAC,IAAH,GAAU,EAAV;AAEA,UAAM,SAAS,GAAG,EAAE,CAAC,WAAH,EAAlB;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;AAChC,QAAA,EAAE,CAAC,IAAH,CAAQ,IAAR,CAAa,WAAW,CAAC,WAAZ,CAAwB,EAAxB,CAAb;AACH;;AAED,aAAO,EAAP;AACH;AApDL;;AAAA;AAAA;AA2HA,WAAa,QAAb;AAAA;AAAA;AAAA;;AAMI,sBAAA;AAAA;;AAAA;AAEC;;AARL;AAAA,EAA8B,WAA9B","sourcesContent":["import * as cryptoJS from 'crypto-js';\nimport { Fixed64, StringReader } from \"../common/classesUtils\";\nimport { randomBytes, num2hexstring } from \"../common/functionsUtils\";\nimport { Address } from \"../wallet/address\";\nimport { Payload, InvokeCode } from \"./payload\";\nimport { Signable } from \"../crypto/signable\";\nimport { TxSignature } from \"./txSignature\";\n\nexport enum TxType  {\n    BookKeeper      = 0x02,\n    Claim           = 0x03,\n    Deploy          = 0xd0,\n    Invoke          = 0xd1,\n    Enrollment      = 0x04,\n    Vote            = 0x05\n}\n\nexport class Transaction implements Signable {\n    type: TxType = 0xd1;\n    version: number = 0x00;\n    payload: Payload;\n    nonce: string;\n    txAttributes: number = 0x00;\n    gasPrice: Fixed64;\n    gasLimit: Fixed64;\n    payer: Address;\n    sigs: TxSignature[] = [];\n\n    constructor() {\n        this.payload = new InvokeCode();\n        this.nonce = randomBytes(4);\n        this.gasPrice = new Fixed64();\n        this.gasLimit = new Fixed64();\n        this.payer = new Address('0000000000000000000000000000000000000000');\n    }\n\n    static deserialize(hexstring: string): Transaction {\n        const tx = new Transaction();\n        const ss = new StringReader(hexstring);\n\n        tx.version = parseInt(ss.read(1), 16);\n        tx.type = parseInt(ss.read(1), 16);\n        tx.nonce = ss.read(4);\n        tx.gasPrice = Fixed64.deserialize(ss);\n        tx.gasLimit = Fixed64.deserialize(ss);\n        tx.payer = new Address(ss.read(20));\n\n        let payload;\n        switch (tx.type) {\n            case TxType.Invoke :\n                payload = new InvokeCode();\n                break;\n            // case TxType.Deploy:\n            //     payload = new DeployCode();\n            //     break;\n            default :\n                payload = new InvokeCode();\n        }\n        payload.deserialize(ss);\n        tx.payload = payload;\n        tx.txAttributes = parseInt(ss.read(1), 16);\n        tx.sigs = [];\n\n        const sigLength = ss.readNextLen();\n        for (let i = 0; i < sigLength; i++) {\n            tx.sigs.push(TxSignature.deserialize(ss));\n        }\n\n        return tx;\n    }\n\n    /**\n     * Serialize transaction to hex string\n     * The result is used to send to blockchain.\n     */\n    serialize(): string {\n        const unsigned = this.serializeUnsignedData();\n        const signed = this.serializeSignedData();\n\n        return unsigned + signed;\n    }\n\n    /**\n     * Serialize transaction data exclueds signatures\n     */\n    serializeUnsignedData() {\n        let result = '';\n        result += num2hexstring(this.version);\n        result += num2hexstring(this.type);\n\n        // nonce 4bytes\n        result += this.nonce;\n        result += this.gasPrice.serialize();\n        result += this.gasLimit.serialize();\n        result += this.payer.serialize();\n        result += this.payload.serialize();\n\n        result += num2hexstring(this.txAttributes);\n\n        return result;\n    }\n\n    /**\n     * Serialize signatures\n     */\n    serializeSignedData() {\n        let result = '';\n        // programs\n        result += num2hexstring(this.sigs.length);\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < this.sigs.length; i++) {\n            result += this.sigs[i].serialize();\n        }\n\n        return result;\n    }\n\n    /**\n     * Get the signable content\n     */\n    getSignContent() {\n        const data = this.serializeUnsignedData();\n\n        const ProgramHexString = cryptoJS.enc.Hex.parse(data);\n        const ProgramSha256 = cryptoJS.SHA256(ProgramHexString).toString();\n        const ProgramSha2562 = cryptoJS.SHA256(cryptoJS.enc.Hex.parse(ProgramSha256)).toString();\n\n        return ProgramSha2562;\n    }\n\n    /**\n     * Get the hash of transaction\n     * @deprecated Use getSignContent instead\n     */\n    getHash() {\n        return this.getSignContent();\n    }\n}\n\n\nexport class Transfer extends Transaction {\n    amount: number | string | undefined;\n    tokenType: string | undefined;\n    from: Address | undefined;\n    to: Address | undefined;\n    method: string | undefined;\n    constructor() {\n        super();\n    }\n}\n"],"sourceRoot":""}]}
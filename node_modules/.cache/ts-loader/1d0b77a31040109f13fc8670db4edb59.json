{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-2!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/wallet/address.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/wallet/address.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport * as base58 from 'base-58';\nimport { ADDR_VERSION } from '../common/consts';\nimport { ERROR_CODE } from '../common/error';\nimport { sha256, ab2hexstring, hash160, reverseHex } from '../common/functionsUtils';\nimport { programFromPubKey } from \"../crypto/programs\";\nexport var Address =\n/*#__PURE__*/\nfunction () {\n  function Address(value) {\n    _classCallCheck(this, Address);\n\n    if (value.length === 40 || value.length === 34) {\n      this.value = value;\n    } else {\n      throw ERROR_CODE.INVALID_PARAMS;\n    }\n  }\n  /**\n   * Generate address from public key.\n   *\n   * @param publicKey Public key to use\n   */\n\n\n  _createClass(Address, [{\n    key: \"toBase58\",\n\n    /**\n     * Gets Base58 encoded representation of the address.\n     */\n    value: function toBase58() {\n      if (this.value.length === 34) {\n        return this.value;\n      } else {\n        return hexToBase58(this.value);\n      }\n    }\n    /**\n     * Gets Hex encoded representation of the address.\n     */\n\n  }, {\n    key: \"toHexString\",\n    value: function toHexString() {\n      if (this.value.length === 40) {\n        return reverseHex(this.value);\n      } else {\n        return reverseHex(base58ToHex(this.value));\n      }\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      if (this.value.length === 40) {\n        return this.value;\n      } else {\n        return base58ToHex(this.value);\n      }\n    }\n  }], [{\n    key: \"fromPubKey\",\n    value: function fromPubKey(publicKey) {\n      var program = programFromPubKey(publicKey);\n      var programHash = hash160(program);\n      return new Address(programHash);\n    }\n  }]);\n\n  return Address;\n}();\n\nfunction hexToBase58(hexEncoded) {\n  var data = ADDR_VERSION + hexEncoded;\n  var hash = sha256(data);\n  var checksum = hash.slice(0, 8);\n  var datas = data + checksum;\n  return base58.encode(new Buffer(datas, 'hex'));\n}\n\nfunction base58ToHex(base58Encoded) {\n  var decoded = base58.decode(base58Encoded);\n  var hexEncoded = ab2hexstring(decoded).substr(2, 40);\n\n  if (base58Encoded !== hexToBase58(hexEncoded)) {\n    throw new Error('[addressToU160] decode encoded verify failed');\n  }\n\n  return hexEncoded;\n}",{"version":3,"sources":["/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/wallet/address.ts"],"names":[],"mappings":";;AAAA,OAAO,KAAK,MAAZ,MAAwB,SAAxB;AACA,SAAS,YAAT,QAA6B,kBAA7B;AACA,SAAS,UAAT,QAA2B,iBAA3B;AACA,SAAS,MAAT,EAAiB,YAAjB,EAA+B,OAA/B,EAAwC,UAAxC,QAA0D,0BAA1D;AAEA,SAAS,iBAAT,QAAkC,oBAAlC;AAEA,WAAa,OAAb;AAAA;AAAA;AAMI,mBAAY,KAAZ,EAAyB;AAAA;;AACrB,QAAI,KAAK,CAAC,MAAN,KAAiB,EAAjB,IAAuB,KAAK,CAAC,MAAN,KAAiB,EAA5C,EAAgD;AAC5C,WAAK,KAAL,GAAa,KAAb;AACH,KAFD,MAEO;AACH,YAAM,UAAU,CAAC,cAAjB;AACH;AACJ;AAED;;;;;;;AAdJ;AAAA;;AAyBI;;;AAzBJ,+BA4BY;AACJ,UAAI,KAAK,KAAL,CAAW,MAAX,KAAsB,EAA1B,EAA8B;AAC1B,eAAO,KAAK,KAAZ;AACH,OAFD,MAEO;AACH,eAAO,WAAW,CAAC,KAAK,KAAN,CAAlB;AACH;AACJ;AAED;;;;AApCJ;AAAA;AAAA,kCAuCe;AACP,UAAI,KAAK,KAAL,CAAW,MAAX,KAAsB,EAA1B,EAA8B;AAC1B,eAAO,UAAU,CAAC,KAAK,KAAN,CAAjB;AACH,OAFD,MAEO;AACH,eAAO,UAAU,CAAC,WAAW,CAAC,KAAK,KAAN,CAAZ,CAAjB;AACH;AACJ;AA7CL;AAAA;AAAA,gCA+Ca;AACL,UAAI,KAAK,KAAL,CAAW,MAAX,KAAsB,EAA1B,EAA8B;AAC1B,eAAO,KAAK,KAAZ;AACH,OAFD,MAEO;AACH,eAAO,WAAW,CAAC,KAAK,KAAN,CAAlB;AACH;AACJ;AArDL;AAAA;AAAA,+BAmBsB,SAnBtB,EAmB0C;AAClC,UAAM,OAAO,GAAG,iBAAiB,CAAC,SAAD,CAAjC;AACA,UAAM,WAAW,GAAG,OAAO,CAAC,OAAD,CAA3B;AACA,aAAO,IAAI,OAAJ,CAAY,WAAZ,CAAP;AACH;AAvBL;;AAAA;AAAA;;AAwDA,SAAS,WAAT,CAAqB,UAArB,EAAuC;AACnC,MAAM,IAAI,GAAG,YAAY,GAAG,UAA5B;AACA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAD,CAAnB;AACA,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,CAAd,CAAjB;AACA,MAAM,KAAK,GAAG,IAAI,GAAG,QAArB;AACA,SAAO,MAAM,CAAC,MAAP,CAAc,IAAI,MAAJ,CAAW,KAAX,EAAkB,KAAlB,CAAd,CAAP;AACH;;AAED,SAAS,WAAT,CAAqB,aAArB,EAA0C;AACtC,MAAM,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc,aAAd,CAAhB;AACA,MAAM,UAAU,GAAG,YAAY,CAAC,OAAD,CAAZ,CAAsB,MAAtB,CAA6B,CAA7B,EAAgC,EAAhC,CAAnB;;AACA,MAAI,aAAa,KAAK,WAAW,CAAC,UAAD,CAAjC,EAA+C;AAC3C,UAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;AACH;;AACD,SAAO,UAAP;AACH","sourcesContent":["import * as base58 from 'base-58';\nimport { ADDR_VERSION } from '../common/consts';\nimport { ERROR_CODE } from '../common/error';\nimport { sha256, ab2hexstring, hash160, reverseHex } from '../common/functionsUtils';\nimport { PublicKey } from \"../crypto/publicKey\";\nimport { programFromPubKey } from \"../crypto/programs\";\n\nexport class Address {\n    /**\n     * Base58 or Hex encoded address\n     */\n    value: string;\n\n    constructor(value: string) {\n        if (value.length === 40 || value.length === 34) {\n            this.value = value;\n        } else {\n            throw ERROR_CODE.INVALID_PARAMS;\n        }\n    }\n\n    /**\n     * Generate address from public key.\n     *\n     * @param publicKey Public key to use\n     */\n    static fromPubKey(publicKey: PublicKey): Address {\n        const program = programFromPubKey(publicKey);\n        const programHash = hash160(program);\n        return new Address(programHash);\n    }\n\n    /**\n     * Gets Base58 encoded representation of the address.\n     */\n    toBase58() {\n        if (this.value.length === 34) {\n            return this.value;\n        } else {\n            return hexToBase58(this.value);\n        }\n    }\n\n    /**\n     * Gets Hex encoded representation of the address.\n     */\n    toHexString() {\n        if (this.value.length === 40) {\n            return reverseHex(this.value);\n        } else {\n            return reverseHex(base58ToHex(this.value));\n        }\n    }\n\n    serialize() {\n        if (this.value.length === 40) {\n            return this.value;\n        } else {\n            return base58ToHex(this.value);\n        }\n    }\n}\n\nfunction hexToBase58(hexEncoded: string): string {\n    const data = ADDR_VERSION + hexEncoded;\n    const hash = sha256(data);\n    const checksum = hash.slice(0, 8);\n    const datas = data + checksum;\n    return base58.encode(new Buffer(datas, 'hex'));\n}\n\nfunction base58ToHex(base58Encoded: string) {\n    const decoded = base58.decode(base58Encoded);\n    const hexEncoded = ab2hexstring(decoded).substr(2, 40);\n    if (base58Encoded !== hexToBase58(hexEncoded)) {\n        throw new Error('[addressToU160] decode encoded verify failed');\n    }\n    return hexEncoded;\n}\n"],"sourceRoot":""}]}
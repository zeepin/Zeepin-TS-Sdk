{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-3!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/txSignature.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/txSignature.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { hex2VarBytes } from \"../common/functionsUtils\";\nimport { getParamsFromProgram, getProgramInfo, programFromParams, programFromPubKey, programFromMultiPubKey } from \"../crypto/programs\";\nexport var TxSignature =\n/*#__PURE__*/\nfunction () {\n  function TxSignature() {\n    _classCallCheck(this, TxSignature);\n\n    /**\n     * Public keys used to create this signature.\n     */\n    this.pubKeys = []; // Cardinality of the signature\n\n    this.M = 1; // Signature values\n\n    this.sigData = [];\n  }\n\n  _createClass(TxSignature, [{\n    key: \"serialize\",\n\n    /**\n     * Serializes signature to Hex representation.\n     *\n     */\n    value: function serialize() {\n      var result = '';\n      var invocationScript = programFromParams(this.sigData);\n      var verificationScript = '';\n\n      if (this.pubKeys.length === 0) {\n        throw new Error('No pubkeys in sig');\n      } else if (this.pubKeys.length === 1) {\n        verificationScript = programFromPubKey(this.pubKeys[0]);\n      } else {\n        verificationScript = programFromMultiPubKey(this.pubKeys, this.M);\n      }\n\n      result += hex2VarBytes(invocationScript);\n      result += hex2VarBytes(verificationScript);\n      return result;\n    }\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(sr) {\n      var sig = new TxSignature();\n      var invocationScript = sr.readNextBytes();\n      var verificationScript = sr.readNextBytes();\n      var sigData = getParamsFromProgram(invocationScript);\n      var info = getProgramInfo(verificationScript);\n      sig.M = info.M;\n      sig.pubKeys = info.pubKeys;\n      sig.sigData = sigData;\n      return sig;\n    }\n    /**\n     * Creates Transaction signature of hash with supplied private key and scheme.\n     *\n     * If the signature schemas is not provided, the default schemes for the key types are used.\n     *\n     * @param hash hash of the transaction or signable transaction\n     * @param privateKey Private key to use\n     * @param scheme Signature scheme to use\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(hash, privateKey, scheme) {\n      var signature = new TxSignature();\n      signature.M = 1;\n      signature.pubKeys = [privateKey.getPublicKey()];\n      signature.sigData = [privateKey.sign(hash, scheme).serializeHex()];\n      return signature;\n    }\n  }]);\n\n  return TxSignature;\n}();",null]}
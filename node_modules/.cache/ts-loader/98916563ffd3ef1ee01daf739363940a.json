{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-2!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/cryptoParams.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/cryptoParams.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nexport var Curve =\n/*#__PURE__*/\nfunction () {\n  function Curve(label, hex, preset) {\n    _classCallCheck(this, Curve);\n\n    this.label = label;\n    this.hex = hex;\n    this.preset = preset;\n    Curve.values.push(this);\n  }\n  /**\n   * Finds Curvecorresponding to specified hex representation.\n   *\n   * @param hex Byte hex value\n   */\n\n\n  _createClass(Curve, null, [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      var item = Curve.values.find(function (v) {\n        return v.hex === hex;\n      });\n\n      if (item === undefined) {\n        throw new Error('Enum value not found');\n      }\n\n      return item;\n    }\n    /**\n     * Finds Curve corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n\n  }, {\n    key: \"fromLabel\",\n    value: function fromLabel(label) {\n      var item = Curve.values.find(function (v) {\n        return v.label === label;\n      });\n\n      if (item === undefined) {\n        throw new Error('Enum value not found');\n      }\n\n      return item;\n    }\n  }]);\n\n  return Curve;\n}();\nCurve.values = [];\nCurve.SECP224R1 = new Curve('P-224', 1, 'p224');\nCurve.SECP256R1 = new Curve('P-256', 2, 'p256');\nCurve.SECP384R1 = new Curve('P-384', 3, 'p384');\nCurve.SECP521R1 = new Curve('P-521', 4, 'p521');\nCurve.SM2P256V1 = new Curve('sm2p256v1', 20, 'sm2p256v1');\nCurve.ED25519 = new Curve('ed25519', 25, 'ed25519');\nexport var SignatureScheme =\n/*#__PURE__*/\nfunction () {\n  function SignatureScheme(label, hex, labelJWS) {\n    _classCallCheck(this, SignatureScheme);\n\n    this.label = label;\n    this.hex = hex;\n    this.labelJWS = labelJWS;\n    SignatureScheme.values.push(this);\n  }\n  /**\n   * Finds Signature schema corresponding to specified hex representation.\n   *\n   * @param hex Byte hex value\n   */\n\n\n  _createClass(SignatureScheme, null, [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      var item = SignatureScheme.values.find(function (v) {\n        return v.hex === hex;\n      });\n\n      if (item === undefined) {\n        throw new Error('Enum value not found');\n      }\n\n      return item;\n    }\n    /**\n     * Finds Signature schema corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n\n  }, {\n    key: \"fromLabel\",\n    value: function fromLabel(label) {\n      var item = SignatureScheme.values.find(function (v) {\n        return v.label === label;\n      });\n\n      if (item === undefined) {\n        throw new Error('Enum value not found');\n      }\n\n      return item;\n    }\n    /**\n     * Finds Signature schema corresponding to specified label representation in JWS.\n     *\n     * @param label Label\n     */\n\n  }, {\n    key: \"fromLabelJWS\",\n    value: function fromLabelJWS(label) {\n      var item = SignatureScheme.values.find(function (v) {\n        return v.labelJWS === label;\n      });\n\n      if (item === undefined) {\n        throw new Error('Enum value not found');\n      }\n\n      return item;\n    }\n  }]);\n\n  return SignatureScheme;\n}();\nSignatureScheme.values = [];\nSignatureScheme.ECDSAwithSHA224 = new SignatureScheme('SHA224withECDSA', 0, 'ES224');\nSignatureScheme.ECDSAwithSHA256 = new SignatureScheme('SHA256withECDSA', 1, 'ES256');\nSignatureScheme.ECDSAwithSHA384 = new SignatureScheme('SHA384withECDSA', 2, 'ES384');\nSignatureScheme.ECDSAwithSHA512 = new SignatureScheme('SHA512withECDSA', 3, 'ES512'); // tslint:disable-next-line:variable-name\n\nSignatureScheme.ECDSAwithSHA3_224 = new SignatureScheme('SHA3-224withECDSA', 4, 'ES3-224'); // tslint:disable-next-line:variable-name\n\nSignatureScheme.ECDSAwithSHA3_256 = new SignatureScheme('SHA3-256withECDSA', 5, 'ES3-256'); // tslint:disable-next-line:variable-name\n\nSignatureScheme.ECDSAwithSHA3_384 = new SignatureScheme('SHA3-384withECDSA', 6, 'ES3-384'); // tslint:disable-next-line:variable-name\n\nSignatureScheme.ECDSAwithSHA3_512 = new SignatureScheme('SHA3-512withECDSA', 7, 'ES3-512');\nSignatureScheme.ECDSAwithRIPEMD160 = new SignatureScheme('RIPEMD160withECDSA', 8, 'ER160');\nSignatureScheme.SM2withSM3 = new SignatureScheme('SM3withSM2', 9, 'SM');\nSignatureScheme.EDDSAwithSHA512 = new SignatureScheme('SHA512withEdDSA', 10, 'EDS512');\nexport var KeyType =\n/*#__PURE__*/\nfunction () {\n  function KeyType(label, hex, defaultSchema) {\n    _classCallCheck(this, KeyType);\n\n    this.label = label;\n    this.hex = hex;\n    this.defaultSchema = defaultSchema;\n    KeyType.values.push(this);\n  }\n  /**\n   * Finds Key type corresponding to specified hex representation.\n   *\n   * @param hex Byte hex value\n   */\n\n\n  _createClass(KeyType, null, [{\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      var item = KeyType.values.find(function (v) {\n        return v.hex === hex;\n      });\n\n      if (item === undefined) {\n        throw new Error('Enum value not found');\n      }\n\n      return item;\n    }\n    /**\n     * Finds Key type corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n\n  }, {\n    key: \"fromLabel\",\n    value: function fromLabel(label) {\n      var item = KeyType.values.find(function (v) {\n        return v.label === label;\n      });\n\n      if (item === undefined) {\n        throw new Error('Enum value not found');\n      }\n\n      return item;\n    }\n  }]);\n\n  return KeyType;\n}();\nKeyType.values = [];\nKeyType.ECDSA = new KeyType('ECDSA', 0x12, SignatureScheme.ECDSAwithSHA256);\nKeyType.SM2 = new KeyType('SM2', 0x13, SignatureScheme.SM2withSM3);\nKeyType.EDDSA = new KeyType('EDDSA', 0x14, SignatureScheme.EDDSAwithSHA512);\nexport var KeyParameters =\n/*#__PURE__*/\nfunction () {\n  function KeyParameters(curve) {\n    _classCallCheck(this, KeyParameters);\n\n    this.curve = curve;\n  }\n  /**\n   * Create KeyParameters from json.\n   * @param json JsonKeyParameters\n   */\n\n\n  _createClass(KeyParameters, [{\n    key: \"serializeJson\",\n\n    /**\n     * Serialize KeyParameters to json.\n     */\n    value: function serializeJson() {\n      return {\n        curve: this.curve.label\n      };\n    }\n  }], [{\n    key: \"deserializeJson\",\n    value: function deserializeJson(json) {\n      return new KeyParameters(Curve.fromLabel(json.curve));\n    }\n  }]);\n\n  return KeyParameters;\n}();",{"version":3,"sources":["/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/crypto/cryptoParams.ts"],"names":[],"mappings":"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","sourcesContent":["export class Curve {\n    label: string;\n    hex: number;\n    preset: string;\n\n    constructor(label: string, hex: number, preset: string) {\n        this.label = label;\n        this.hex = hex;\n        this.preset = preset;\n\n        Curve.values.push(this);\n    }\n    static values: Curve[] = [];\n\n    static SECP224R1 = new Curve('P-224', 1, 'p224');\n    static SECP256R1 = new Curve('P-256', 2, 'p256');\n    static SECP384R1 = new Curve('P-384', 3, 'p384');\n    static SECP521R1 = new Curve('P-521', 4, 'p521');\n    static SM2P256V1 = new Curve('sm2p256v1', 20, 'sm2p256v1');\n    static ED25519 = new Curve('ed25519', 25, 'ed25519');\n\n    /**\n     * Finds Curvecorresponding to specified hex representation.\n     *\n     * @param hex Byte hex value\n     */\n    static fromHex(hex: number): Curve {\n        const item = Curve.values.find((v) => v.hex === hex);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Curve corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n    static fromLabel(label: string): Curve {\n        const item = Curve.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n}\n\n\nexport class SignatureScheme {\n    label: string;\n    hex: number;\n    labelJWS: string;\n\n    constructor(label: string, hex: number, labelJWS: string) {\n        this.label = label;\n        this.hex = hex;\n        this.labelJWS = labelJWS;\n        SignatureScheme.values.push(this);\n    }\n\n    static values: SignatureScheme[] = [];\n\n    static ECDSAwithSHA224 = new SignatureScheme('SHA224withECDSA', 0, 'ES224');\n    static ECDSAwithSHA256 = new SignatureScheme('SHA256withECDSA', 1, 'ES256');\n    static ECDSAwithSHA384 = new SignatureScheme('SHA384withECDSA', 2, 'ES384');\n    static ECDSAwithSHA512 = new SignatureScheme('SHA512withECDSA', 3, 'ES512');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_224 = new SignatureScheme('SHA3-224withECDSA', 4, 'ES3-224');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_256 = new SignatureScheme('SHA3-256withECDSA', 5, 'ES3-256');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_384 = new SignatureScheme('SHA3-384withECDSA', 6, 'ES3-384');\n    // tslint:disable-next-line:variable-name\n    static ECDSAwithSHA3_512 = new SignatureScheme('SHA3-512withECDSA', 7, 'ES3-512');\n    static ECDSAwithRIPEMD160 = new SignatureScheme('RIPEMD160withECDSA', 8, 'ER160');\n    static SM2withSM3 = new SignatureScheme('SM3withSM2', 9, 'SM');\n    static EDDSAwithSHA512 = new SignatureScheme('SHA512withEdDSA', 10, 'EDS512');\n\n    /**\n     * Finds Signature schema corresponding to specified hex representation.\n     *\n     * @param hex Byte hex value\n     */\n    static fromHex(hex: number): SignatureScheme {\n        const item = SignatureScheme.values.find((v) => v.hex === hex);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Signature schema corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n    static fromLabel(label: string): SignatureScheme {\n        const item = SignatureScheme.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Signature schema corresponding to specified label representation in JWS.\n     *\n     * @param label Label\n     */\n    static fromLabelJWS(label: string): SignatureScheme {\n        const item = SignatureScheme.values.find((v) => v.labelJWS === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n}\n\n\nexport class KeyType {\n    label: string;\n    hex: number;\n    defaultSchema: SignatureScheme;\n\n    constructor(label: string, hex: number, defaultSchema: SignatureScheme) {\n        this.label = label;\n        this.hex = hex;\n        this.defaultSchema = defaultSchema;\n        KeyType.values.push(this);\n    }\n\n    static values: KeyType[] = [];\n\n    static ECDSA = new KeyType('ECDSA', 0x12, SignatureScheme.ECDSAwithSHA256);\n    static SM2 = new KeyType('SM2', 0x13, SignatureScheme.SM2withSM3);\n    static EDDSA = new KeyType('EDDSA', 0x14, SignatureScheme.EDDSAwithSHA512);\n\n    /**\n     * Finds Key type corresponding to specified hex representation.\n     *\n     * @param hex Byte hex value\n     */\n    static fromHex(hex: number): KeyType {\n        const item = KeyType.values.find((v) => v.hex === hex);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n\n    /**\n     * Finds Key type corresponding to specified label representation.\n     *\n     * @param label Label\n     */\n    static fromLabel(label: string): KeyType {\n        const item = KeyType.values.find((v) => v.label === label);\n        if (item === undefined) {\n            throw new Error('Enum value not found');\n        }\n\n        return item;\n    }\n}\n\nexport class KeyParameters {\n    curve: Curve;\n\n    constructor(curve: Curve) {\n        this.curve = curve;\n    }\n\n    /**\n     * Create KeyParameters from json.\n     * @param json JsonKeyParameters\n     */\n    static deserializeJson(json: JsonKeyParameters): KeyParameters {\n        return new KeyParameters(\n            Curve.fromLabel(json.curve)\n        );\n    }\n\n    /**\n     * Serialize KeyParameters to json.\n     */\n    serializeJson(): JsonKeyParameters {\n        return {\n            curve: this.curve.label\n        };\n    }\n}\n\n/**\n * Json representation of the Key parameters.\n */\nexport interface JsonKeyParameters {\n    curve: string;\n}\n\n\n\n\n\n"],"sourceRoot":""}]}
{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-2!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/common/functionsUtils.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/common/functionsUtils.ts","mtime":1555654528000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _getIterator from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nimport \"core-js/modules/es6.string.repeat\";\nimport _Number$isSafeInteger from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/number/is-safe-integer\";\nimport \"core-js/modules/es6.typed.uint8-array\";\nimport _parseInt from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport * as cryptoJS from 'crypto-js';\nimport { ERROR_CODE } from \"./error\";\n/**\n * Creates random bytes.\n *\n * @param data Hex encoded data\n */\n\nexport function randomBytes(len) {\n  return cryptoJS.lib.WordArray.random(len).toString();\n  ;\n}\n/**\n * Computes sha-256 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\n\nexport function sha256(data) {\n  var hex = cryptoJS.enc.Hex.parse(data);\n  var sha = cryptoJS.SHA256(hex).toString();\n  return sha;\n}\n/**\n * Turn hex string into array buffer\n * @param str hex string\n */\n\nexport function hexstring2ab(str) {\n  var result = [];\n\n  while (str.length >= 2) {\n    result.push(_parseInt(str.substring(0, 2), 16));\n    str = str.substring(2, str.length);\n  }\n\n  return result;\n}\n/**\n * Turn array buffer into hex string\n * @param arr Array like value\n */\n\nexport function ab2hexstring(arr) {\n  var result = '';\n  var uint8Arr = new Uint8Array(arr);\n\n  for (var i = 0; i < uint8Arr.byteLength; i++) {\n    var str = uint8Arr[i].toString(16);\n    str = str.length === 0 ? '00' : str.length === 1 ? '0' + str : str;\n    result += str;\n  }\n\n  return result;\n}\n/**\n * Converts a number to a big endian hexstring of a suitable size, optionally little endian\n * @param {number} num\n * @param {number} size - The required size in bytes, eg 1 for Uint8, 2 for Uint16. Defaults to 1.\n * @param {boolean} littleEndian - Encode the hex in little endian form\n * @return {string}\n */\n\nexport var num2hexstring = function num2hexstring(num) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var littleEndian = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (num < 0) {\n    throw new RangeError('num must be >=0');\n  }\n\n  if (size % 1 !== 0) {\n    throw new Error('size must be a whole integer');\n  }\n\n  if (!_Number$isSafeInteger(num)) {\n    throw new RangeError(\"num (\".concat(num, \") must be a safe integer\"));\n  }\n\n  size = size * 2;\n  var hexstring = num.toString(16);\n  hexstring = hexstring.length % size === 0 ? hexstring : ('0'.repeat(size) + hexstring).substring(hexstring.length);\n\n  if (littleEndian) {\n    hexstring = reverseHex(hexstring);\n  }\n\n  return hexstring;\n};\n/**\n * Turn normal string into ArrayBuffer\n * @param str Normal string\n */\n\nexport function str2ab(str) {\n  var buf = new ArrayBuffer(str.length); // 每个字符占用1个字节\n\n  var bufView = new Uint8Array(buf);\n\n  for (var i = 0, strLen = str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n\n  return buf;\n}\n/**\n * Turn ArrayBuffer or array-like oject into normal string\n * @param buf\n */\n\nexport function ab2str(buf) {\n  return String.fromCharCode.apply(null, new Uint8Array(buf));\n}\n/**\n * Turn normal string into hex string\n * @param str Normal string\n */\n\nexport function str2hexstr(str) {\n  return ab2hexstring(str2ab(str));\n}\n/**\n * Turn hex string into normal string\n * @param str Hex string\n */\n\nexport function hexstr2str(str) {\n  return ab2str(hexstring2ab(str));\n}\n/**\n * return the (length of bytes) + bytes\n * @param hex Hex string\n */\n\nexport function hex2VarBytes(hex) {\n  var result = '';\n  result += num2VarInt(hex.length / 2);\n  result += hex;\n  return result;\n}\n/**\n * Converts a number to a hex\n * @param {number} num - The number\n * @returns {string} hexstring of the variable Int.\n */\n\nexport var num2VarInt = function num2VarInt(num) {\n  if (num < 0xfd) {\n    return num2hexstring(num);\n  } else if (num <= 0xffff) {\n    // uint16\n    return 'fd' + num2hexstring(num, 2, true);\n  } else if (num <= 0xffffffff) {\n    // uint32\n    return 'fe' + num2hexstring(num, 4, true);\n  } else {\n    // uint64\n    return 'ff' + num2hexstring(num, 8, true);\n  }\n}; // @ts-ignore\n\nexport function bigIntToBytes(value) {\n  var data = value.toBytesLE();\n  var negData = value.neg().toBytesLE();\n  var stop;\n\n  if (value.isNegative()) {\n    stop = 255;\n  } else {\n    stop = 0;\n  }\n\n  var b = stop;\n  var pos = 0;\n\n  for (var i = data.length - 1; i >= 0; i--) {\n    if (data[i] !== stop) {\n      b = value.isNegative() ? negData[i] : data[i];\n      pos = i + 1;\n      break;\n    }\n  }\n\n  data = data.slice(0, pos);\n\n  if (b >> 7 === 1) {\n    data.push(value.isNegative() ? 255 : 0);\n  }\n\n  return new Buffer(data).toString('hex');\n}\n/**\n * Reverses a hex string, 2 chars as 1 byte\n * @example\n * reverseHex('abcdef') = 'efcdab'\n * @param {string} hex - HEX string\n * @return {string} reversed hex string.\n */\n\nexport var reverseHex = function reverseHex(hex) {\n  if (hex.length % 2 !== 0) {\n    throw new Error(\"Incorrect Length: \".concat(hex));\n  }\n\n  var out = '';\n\n  for (var i = hex.length - 2; i >= 0; i -= 2) {\n    out += hex.substr(i, 2);\n  }\n\n  return out;\n};\n/**\n * Computes ripemd-160 hash of sha-256 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\n\nexport function hash160(SignatureScript) {\n  return ripemd160(sha256(SignatureScript));\n}\n/**\n * Computes ripemd-160 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\n\nexport function ripemd160(data) {\n  var hex = cryptoJS.enc.Hex.parse(data);\n  var ripemd = cryptoJS.RIPEMD160(hex).toString();\n  return ripemd;\n}\nexport function isHexString(str) {\n  var regexp = /^[0-9a-fA-F]+$/;\n  return regexp.test(str) && str.length % 2 === 0;\n}\nexport function isBase64(str) {\n  return Buffer.from(str, 'base64').toString('base64') === str;\n}\n/**\n * Concat params as the query part in rest\n * @param params\n */\n\nexport function concatParams(params) {\n  var result = '';\n\n  if (params.size === 0) {\n    return '';\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _getIterator(params.keys()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n      var value = params.get(key);\n\n      if (value) {\n        value = encodeURIComponent(value);\n      }\n\n      result += \"&\".concat(key, \"=\").concat(value);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return '?' + result.substr(1);\n}\nexport function keystoreCheck(keystore) {\n  if (!keystore.hasOwnProperty('accounts')) {\n    throw ERROR_CODE.Keystore_ERROR;\n  } // @ts-ignore\n\n\n  var account = keystore.accounts[0];\n\n  if (!account.hasOwnProperty('address')) {\n    throw ERROR_CODE.Keystore_ERROR;\n  }\n\n  if (!account.hasOwnProperty('key')) {\n    throw ERROR_CODE.Keystore_ERROR;\n  }\n\n  if (!account.hasOwnProperty('salt')) {\n    throw ERROR_CODE.Keystore_ERROR;\n  }\n}",{"version":3,"sources":["/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/common/functionsUtils.ts"],"names":[],"mappings":";;;;;;;;AACA,OAAO,KAAK,QAAZ,MAA0B,WAA1B;AACA,SAAS,UAAT,QAA2B,SAA3B;AAEA;;;;;;AAKA,OAAM,SAAU,WAAV,CAAuB,GAAvB,EAAkC;AACpC,SAAO,QAAQ,CAAC,GAAT,CAAa,SAAb,CAAuB,MAAvB,CAA8B,GAA9B,EAAmC,QAAnC,EAAP;AAAqD;AACxD;AAED;;;;;;AAKA,OAAM,SAAU,MAAV,CAAkB,IAAlB,EAA8B;AAChC,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAT,CAAa,GAAb,CAAiB,KAAjB,CAAuB,IAAvB,CAAZ;AACA,MAAM,GAAG,GAAG,QAAQ,CAAC,MAAT,CAAgB,GAAhB,EAAqB,QAArB,EAAZ;AACA,SAAO,GAAP;AACH;AAED;;;;;AAIA,OAAM,SAAU,YAAV,CAAuB,GAAvB,EAAkC;AACpC,MAAM,MAAM,GAAY,EAAxB;;AACA,SAAO,GAAG,CAAC,MAAJ,IAAc,CAArB,EAAwB;AACpB,IAAA,MAAM,CAAC,IAAP,CAAY,UAAS,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,CAAjB,CAAT,EAA8B,EAA9B,CAAZ;AACA,IAAA,GAAG,GAAG,GAAG,CAAC,SAAJ,CAAc,CAAd,EAAiB,GAAG,CAAC,MAArB,CAAN;AACH;;AACD,SAAO,MAAP;AACH;AAED;;;;;AAIA,OAAM,SAAU,YAAV,CAAuB,GAAvB,EAA+B;AACjC,MAAI,MAAM,GAAW,EAArB;AACA,MAAM,QAAQ,GAAe,IAAI,UAAJ,CAAe,GAAf,CAA7B;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,UAA7B,EAAyC,CAAC,EAA1C,EAA8C;AAC1C,QAAI,GAAG,GAAG,QAAQ,CAAC,CAAD,CAAR,CAAY,QAAZ,CAAqB,EAArB,CAAV;AACA,IAAA,GAAG,GAAG,GAAG,CAAC,MAAJ,KAAe,CAAf,GACA,IADA,GAEA,GAAG,CAAC,MAAJ,KAAe,CAAf,GACI,MAAM,GADV,GAEI,GAJV;AAKA,IAAA,MAAM,IAAI,GAAV;AACH;;AACD,SAAO,MAAP;AACH;AAED;;;;;;;;AAOA,OAAO,IAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,GAAD,EAAgD;AAAA,MAAlC,IAAkC,uEAA3B,CAA2B;AAAA,MAAxB,YAAwB,uEAAT,KAAS;;AACzE,MAAI,GAAG,GAAG,CAAV,EAAa;AACT,UAAM,IAAI,UAAJ,CAAe,iBAAf,CAAN;AACH;;AACD,MAAI,IAAI,GAAG,CAAP,KAAa,CAAjB,EAAoB;AAChB,UAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;AACH;;AACD,MAAI,CAAC,sBAAqB,GAArB,CAAL,EAAgC;AAC5B,UAAM,IAAI,UAAJ,gBAAuB,GAAvB,8BAAN;AACH;;AAED,EAAA,IAAI,GAAG,IAAI,GAAG,CAAd;AACA,MAAI,SAAS,GAAG,GAAG,CAAC,QAAJ,CAAa,EAAb,CAAhB;AACA,EAAA,SAAS,GAAG,SAAS,CAAC,MAAV,GAAmB,IAAnB,KAA4B,CAA5B,GAAgC,SAAhC,GAA4C,CAAC,IAAI,MAAJ,CAAW,IAAX,IAAmB,SAApB,EAA+B,SAA/B,CAAyC,SAAS,CAAC,MAAnD,CAAxD;;AACA,MAAI,YAAJ,EAAkB;AACd,IAAA,SAAS,GAAG,UAAU,CAAC,SAAD,CAAtB;AACH;;AACD,SAAO,SAAP;AACH,CAlBM;AAoBP;;;;;AAIA,OAAM,SAAU,MAAV,CAAiB,GAAjB,EAA4B;AAC9B,MAAM,GAAG,GAAG,IAAI,WAAJ,CAAgB,GAAG,CAAC,MAApB,CAAZ,CAD8B,CACW;;AACzC,MAAM,OAAO,GAAG,IAAI,UAAJ,CAAe,GAAf,CAAhB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,MAAM,GAAG,GAAG,CAAC,MAA7B,EAAqC,CAAC,GAAG,MAAzC,EAAiD,CAAC,EAAlD,EAAsD;AAClD,IAAA,OAAO,CAAC,CAAD,CAAP,GAAa,GAAG,CAAC,UAAJ,CAAe,CAAf,CAAb;AACH;;AACD,SAAO,GAAP;AACH;AAED;;;;;AAIA,OAAM,SAAU,MAAV,CAAiB,GAAjB,EAA4C;AAC9C,SAAO,MAAM,CAAC,YAAP,CAAoB,KAApB,CAA0B,IAA1B,EAAgC,IAAI,UAAJ,CAAe,GAAf,CAAhC,CAAP;AACH;AAED;;;;;AAIA,OAAM,SAAU,UAAV,CAAqB,GAArB,EAAgC;AAClC,SAAO,YAAY,CAAC,MAAM,CAAC,GAAD,CAAP,CAAnB;AACH;AAED;;;;;AAIA,OAAM,SAAU,UAAV,CAAqB,GAArB,EAAgC;AAClC,SAAO,MAAM,CAAC,YAAY,CAAC,GAAD,CAAb,CAAb;AACH;AAED;;;;;AAIA,OAAM,SAAU,YAAV,CAAuB,GAAvB,EAAkC;AACpC,MAAI,MAAM,GAAG,EAAb;AACA,EAAA,MAAM,IAAI,UAAU,CAAC,GAAG,CAAC,MAAJ,GAAa,CAAd,CAApB;AACA,EAAA,MAAM,IAAI,GAAV;AACA,SAAO,MAAP;AACH;AAED;;;;;;AAKA,OAAO,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,GAAD,EAAgB;AACtC,MAAI,GAAG,GAAG,IAAV,EAAgB;AACZ,WAAO,aAAa,CAAC,GAAD,CAApB;AACH,GAFD,MAEO,IAAI,GAAG,IAAI,MAAX,EAAmB;AACtB;AACA,WAAO,OAAO,aAAa,CAAC,GAAD,EAAM,CAAN,EAAS,IAAT,CAA3B;AACH,GAHM,MAGA,IAAI,GAAG,IAAI,UAAX,EAAuB;AAC1B;AACA,WAAO,OAAO,aAAa,CAAC,GAAD,EAAM,CAAN,EAAS,IAAT,CAA3B;AACH,GAHM,MAGA;AACH;AACA,WAAO,OAAO,aAAa,CAAC,GAAD,EAAM,CAAN,EAAS,IAAT,CAA3B;AACH;AACJ,CAbM,C,CAiBP;;AACA,OAAM,SAAU,aAAV,CAAwB,KAAxB,EAAmC;AACrC,MAAI,IAAI,GAAG,KAAK,CAAC,SAAN,EAAX;AACA,MAAM,OAAO,GAAG,KAAK,CAAC,GAAN,GAAY,SAAZ,EAAhB;AACA,MAAI,IAAJ;;AACA,MAAI,KAAK,CAAC,UAAN,EAAJ,EAAwB;AACpB,IAAA,IAAI,GAAG,GAAP;AACH,GAFD,MAEO;AACH,IAAA,IAAI,GAAG,CAAP;AACH;;AACD,MAAI,CAAC,GAAG,IAAR;AACA,MAAI,GAAG,GAAG,CAAV;;AACA,OAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAL,GAAc,CAA3B,EAA8B,CAAC,IAAI,CAAnC,EAAsC,CAAC,EAAvC,EAA2C;AACvC,QAAI,IAAI,CAAC,CAAD,CAAJ,KAAY,IAAhB,EAAsB;AAClB,MAAA,CAAC,GAAG,KAAK,CAAC,UAAN,KAAqB,OAAO,CAAC,CAAD,CAA5B,GAAkC,IAAI,CAAC,CAAD,CAA1C;AACA,MAAA,GAAG,GAAG,CAAC,GAAG,CAAV;AACA;AACH;AACJ;;AACD,EAAA,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,GAAd,CAAP;;AAEA,MAAI,CAAC,IAAI,CAAL,KAAW,CAAf,EAAkB;AACd,IAAA,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,UAAN,KAAqB,GAArB,GAA2B,CAArC;AACH;;AACD,SAAO,IAAI,MAAJ,CAAW,IAAX,EAAiB,QAAjB,CAA0B,KAA1B,CAAP;AACH;AAED;;;;;;;;AAOA,OAAO,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,GAAD,EAAgB;AACtC,MAAI,GAAG,CAAC,MAAJ,GAAa,CAAb,KAAmB,CAAvB,EAA0B;AACtB,UAAM,IAAI,KAAJ,6BAA+B,GAA/B,EAAN;AACH;;AACD,MAAI,GAAG,GAAG,EAAV;;AACA,OAAK,IAAI,CAAC,GAAG,GAAG,CAAC,MAAJ,GAAa,CAA1B,EAA6B,CAAC,IAAI,CAAlC,EAAqC,CAAC,IAAI,CAA1C,EAA6C;AACzC,IAAA,GAAG,IAAI,GAAG,CAAC,MAAJ,CAAW,CAAX,EAAc,CAAd,CAAP;AACH;;AACD,SAAO,GAAP;AACH,CATM;AAYP;;;;;;AAKA,OAAM,SAAU,OAAV,CAAkB,eAAlB,EAAyC;AAC3C,SAAO,SAAS,CAAC,MAAM,CAAC,eAAD,CAAP,CAAhB;AACH;AAED;;;;;;AAKA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAAgC;AAClC,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAT,CAAa,GAAb,CAAiB,KAAjB,CAAuB,IAAvB,CAAZ;AACA,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAT,CAAmB,GAAnB,EAAwB,QAAxB,EAAf;AACA,SAAO,MAAP;AACH;AAED,OAAM,SAAU,WAAV,CAAsB,GAAtB,EAAiC;AACnC,MAAM,MAAM,GAAG,gBAAf;AACA,SAAO,MAAM,CAAC,IAAP,CAAY,GAAZ,KAAqB,GAAG,CAAC,MAAJ,GAAa,CAAb,KAAmB,CAA/C;AACH;AAED,OAAM,SAAU,QAAV,CAAmB,GAAnB,EAA8B;AAChC,SAAO,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,QAAjB,EAA2B,QAA3B,CAAoC,QAApC,MAAkD,GAAzD;AACH;AAED;;;;;AAIA,OAAM,SAAU,YAAV,CAAuB,MAAvB,EAAkD;AACpD,MAAI,MAAM,GAAG,EAAb;;AACA,MAAI,MAAM,CAAC,IAAP,KAAgB,CAApB,EAAuB;AACnB,WAAO,EAAP;AACH;;AAJmD;AAAA;AAAA;;AAAA;AAMpD,sCAAkB,MAAM,CAAC,IAAP,EAAlB,4GAAiC;AAAA,UAAtB,GAAsB;AAC7B,UAAI,KAAK,GAAG,MAAM,CAAC,GAAP,CAAW,GAAX,CAAZ;;AACA,UAAI,KAAJ,EAAW;AACP,QAAA,KAAK,GAAG,kBAAkB,CAAC,KAAD,CAA1B;AACH;;AACD,MAAA,MAAM,eAAQ,GAAR,cAAe,KAAf,CAAN;AACH;AAZmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcpD,SAAO,MAAM,MAAM,CAAC,MAAP,CAAc,CAAd,CAAb;AACH;AAED,OAAM,SAAU,aAAV,CAAwB,QAAxB,EAAwC;AAC1C,MAAG,CAAC,QAAQ,CAAC,cAAT,CAAwB,UAAxB,CAAJ,EAAyC;AACrC,UAAM,UAAU,CAAC,cAAjB;AACH,GAHyC,CAK7C;;;AACG,MAAI,OAAO,GAAG,QAAQ,CAAC,QAAT,CAAkB,CAAlB,CAAd;;AAEA,MAAG,CAAC,OAAO,CAAC,cAAR,CAAuB,SAAvB,CAAJ,EAAuC;AACnC,UAAM,UAAU,CAAC,cAAjB;AACH;;AAED,MAAG,CAAC,OAAO,CAAC,cAAR,CAAuB,KAAvB,CAAJ,EAAmC;AAC/B,UAAM,UAAU,CAAC,cAAjB;AACH;;AAED,MAAG,CAAC,OAAO,CAAC,cAAR,CAAuB,MAAvB,CAAJ,EAAoC;AAChC,UAAM,UAAU,CAAC,cAAjB;AACH;AACJ","sourcesContent":["import * as Long from 'long';\nimport * as cryptoJS from 'crypto-js'\nimport { ERROR_CODE } from \"./error\";\n\n/**\n * Creates random bytes.\n *\n * @param data Hex encoded data\n */\nexport function randomBytes (len: number) {\n    return cryptoJS.lib.WordArray.random(len).toString();;\n}\n\n/**\n * Computes sha-256 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\nexport function sha256 (data: string) {\n    const hex = cryptoJS.enc.Hex.parse(data);\n    const sha = cryptoJS.SHA256(hex).toString();\n    return sha;\n}\n\n/**\n * Turn hex string into array buffer\n * @param str hex string\n */\nexport function hexstring2ab(str: string): number[] {\n    const result:number[] = [];\n    while (str.length >= 2) {\n        result.push(parseInt(str.substring(0, 2), 16));\n        str = str.substring(2, str.length);\n    }\n    return result;\n}\n\n/**\n * Turn array buffer into hex string\n * @param arr Array like value\n */\nexport function ab2hexstring(arr: any): string {\n    let result: string = '';\n    const uint8Arr: Uint8Array = new Uint8Array(arr);\n    for (let i = 0; i < uint8Arr.byteLength; i++) {\n        let str = uint8Arr[i].toString(16);\n        str = str.length === 0\n            ? '00'\n            : str.length === 1\n                ? '0' + str\n                : str;\n        result += str;\n    }\n    return result;\n}\n\n/**\n * Converts a number to a big endian hexstring of a suitable size, optionally little endian\n * @param {number} num\n * @param {number} size - The required size in bytes, eg 1 for Uint8, 2 for Uint16. Defaults to 1.\n * @param {boolean} littleEndian - Encode the hex in little endian form\n * @return {string}\n */\nexport const num2hexstring = (num: number, size = 1, littleEndian = false) => {\n    if (num < 0) {\n        throw new RangeError('num must be >=0');\n    }\n    if (size % 1 !== 0) {\n        throw new Error('size must be a whole integer');\n    }\n    if (!Number.isSafeInteger(num)) {\n        throw new RangeError(`num (${num}) must be a safe integer`);\n    }\n\n    size = size * 2;\n    let hexstring = num.toString(16);\n    hexstring = hexstring.length % size === 0 ? hexstring : ('0'.repeat(size) + hexstring).substring(hexstring.length);\n    if (littleEndian) {\n        hexstring = reverseHex(hexstring);\n    }\n    return hexstring;\n};\n\n/**\n * Turn normal string into ArrayBuffer\n * @param str Normal string\n */\nexport function str2ab(str: string) {\n    const buf = new ArrayBuffer(str.length); // 每个字符占用1个字节\n    const bufView = new Uint8Array(buf);\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n        bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n}\n\n/**\n * Turn ArrayBuffer or array-like oject into normal string\n * @param buf\n */\nexport function ab2str(buf: ArrayBuffer | number[]): string {\n    return String.fromCharCode.apply(null, new Uint8Array(buf));\n}\n\n/**\n * Turn normal string into hex string\n * @param str Normal string\n */\nexport function str2hexstr(str: string) {\n    return ab2hexstring(str2ab(str));\n}\n\n/**\n * Turn hex string into normal string\n * @param str Hex string\n */\nexport function hexstr2str(str: string) {\n    return ab2str(hexstring2ab(str));\n}\n\n/**\n * return the (length of bytes) + bytes\n * @param hex Hex string\n */\nexport function hex2VarBytes(hex: string) {\n    let result = '';\n    result += num2VarInt(hex.length / 2);\n    result += hex;\n    return result;\n}\n\n/**\n * Converts a number to a hex\n * @param {number} num - The number\n * @returns {string} hexstring of the variable Int.\n */\nexport const num2VarInt = (num: number) => {\n    if (num < 0xfd) {\n        return num2hexstring(num);\n    } else if (num <= 0xffff) {\n        // uint16\n        return 'fd' + num2hexstring(num, 2, true);\n    } else if (num <= 0xffffffff) {\n        // uint32\n        return 'fe' + num2hexstring(num, 4, true);\n    } else {\n        // uint64\n        return 'ff' + num2hexstring(num, 8, true);\n    }\n};\n\n\n\n// @ts-ignore\nexport function bigIntToBytes(value: Long) {\n    let data = value.toBytesLE();\n    const negData = value.neg().toBytesLE();\n    let stop;\n    if (value.isNegative()) {\n        stop = 255;\n    } else {\n        stop = 0;\n    }\n    let b = stop;\n    let pos = 0;\n    for (let i = data.length - 1; i >= 0; i--) {\n        if (data[i] !== stop) {\n            b = value.isNegative() ? negData[i] : data[i];\n            pos = i + 1;\n            break;\n        }\n    }\n    data = data.slice(0, pos);\n\n    if (b >> 7 === 1) {\n        data.push(value.isNegative() ? 255 : 0);\n    }\n    return new Buffer(data).toString('hex');\n}\n\n/**\n * Reverses a hex string, 2 chars as 1 byte\n * @example\n * reverseHex('abcdef') = 'efcdab'\n * @param {string} hex - HEX string\n * @return {string} reversed hex string.\n */\nexport const reverseHex = (hex: string) => {\n    if (hex.length % 2 !== 0) {\n        throw new Error(`Incorrect Length: ${hex}`);\n    }\n    let out = '';\n    for (let i = hex.length - 2; i >= 0; i -= 2) {\n        out += hex.substr(i, 2);\n    }\n    return out;\n};\n\n\n/**\n * Computes ripemd-160 hash of sha-256 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\nexport function hash160(SignatureScript: string): string {\n    return ripemd160(sha256(SignatureScript));\n}\n\n/**\n * Computes ripemd-160 hash from hex encoded data.\n *\n * @param data Hex encoded data\n */\nexport function ripemd160(data: string) {\n    const hex = cryptoJS.enc.Hex.parse(data);\n    const ripemd = cryptoJS.RIPEMD160(hex).toString();\n    return ripemd;\n}\n\nexport function isHexString(str: string): boolean {\n    const regexp = /^[0-9a-fA-F]+$/;\n    return regexp.test(str) && (str.length % 2 === 0);\n}\n\nexport function isBase64(str: string): boolean {\n    return Buffer.from(str, 'base64').toString('base64') === str;\n}\n\n/**\n * Concat params as the query part in rest\n * @param params\n */\nexport function concatParams(params: Map<string, string>) {\n    let result = '';\n    if (params.size === 0) {\n        return '';\n    }\n\n    for (const key of params.keys()) {\n        let value = params.get(key);\n        if (value) {\n            value = encodeURIComponent(value);\n        }\n        result += `&${key}=${value}`;\n    }\n\n    return '?' + result.substr(1);\n}\n\nexport function keystoreCheck(keystore: object) {\n    if(!keystore.hasOwnProperty('accounts')) {\n        throw ERROR_CODE.Keystore_ERROR;\n    }\n\n\t// @ts-ignore\n    let account = keystore.accounts[0];\n\n    if(!account.hasOwnProperty('address')) {\n        throw ERROR_CODE.Keystore_ERROR;\n    }\n\n    if(!account.hasOwnProperty('key')) {\n        throw ERROR_CODE.Keystore_ERROR;\n    }\n\n    if(!account.hasOwnProperty('salt')) {\n        throw ERROR_CODE.Keystore_ERROR;\n    }\n}\n"],"sourceRoot":""}]}
{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-2!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/common/opCode.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/common/opCode.ts","mtime":1555653862000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["var OPCODE;\n\n(function (OPCODE) {\n  // Constants\n  OPCODE[OPCODE[\"PUSH0\"] = 0] = \"PUSH0\";\n  OPCODE[OPCODE[\"PUSHF\"] = 0] = \"PUSHF\";\n  OPCODE[OPCODE[\"PUSHBYTES1\"] = 1] = \"PUSHBYTES1\";\n  OPCODE[OPCODE[\"PUSHBYTES75\"] = 75] = \"PUSHBYTES75\";\n  OPCODE[OPCODE[\"PUSHDATA1\"] = 76] = \"PUSHDATA1\";\n  OPCODE[OPCODE[\"PUSHDATA2\"] = 77] = \"PUSHDATA2\";\n  OPCODE[OPCODE[\"PUSHDATA4\"] = 78] = \"PUSHDATA4\";\n  OPCODE[OPCODE[\"PUSHM1\"] = 79] = \"PUSHM1\";\n  OPCODE[OPCODE[\"PUSH1\"] = 81] = \"PUSH1\";\n  OPCODE[OPCODE[\"PUSHT\"] = 81] = \"PUSHT\";\n  OPCODE[OPCODE[\"PUSH2\"] = 82] = \"PUSH2\";\n  OPCODE[OPCODE[\"PUSH3\"] = 83] = \"PUSH3\";\n  OPCODE[OPCODE[\"PUSH4\"] = 84] = \"PUSH4\";\n  OPCODE[OPCODE[\"PUSH5\"] = 85] = \"PUSH5\";\n  OPCODE[OPCODE[\"PUSH6\"] = 86] = \"PUSH6\";\n  OPCODE[OPCODE[\"PUSH7\"] = 87] = \"PUSH7\";\n  OPCODE[OPCODE[\"PUSH8\"] = 88] = \"PUSH8\";\n  OPCODE[OPCODE[\"PUSH9\"] = 89] = \"PUSH9\";\n  OPCODE[OPCODE[\"PUSH10\"] = 90] = \"PUSH10\";\n  OPCODE[OPCODE[\"PUSH11\"] = 91] = \"PUSH11\";\n  OPCODE[OPCODE[\"PUSH12\"] = 92] = \"PUSH12\";\n  OPCODE[OPCODE[\"PUSH13\"] = 93] = \"PUSH13\";\n  OPCODE[OPCODE[\"PUSH14\"] = 94] = \"PUSH14\";\n  OPCODE[OPCODE[\"PUSH15\"] = 95] = \"PUSH15\";\n  OPCODE[OPCODE[\"PUSH16\"] = 96] = \"PUSH16\"; // Flow control\n\n  OPCODE[OPCODE[\"NOP\"] = 97] = \"NOP\";\n  OPCODE[OPCODE[\"JMP\"] = 98] = \"JMP\";\n  OPCODE[OPCODE[\"JMPIF\"] = 99] = \"JMPIF\";\n  OPCODE[OPCODE[\"JMPIFNOT\"] = 100] = \"JMPIFNOT\";\n  OPCODE[OPCODE[\"CALL\"] = 101] = \"CALL\";\n  OPCODE[OPCODE[\"RET\"] = 102] = \"RET\";\n  OPCODE[OPCODE[\"APPCALL\"] = 103] = \"APPCALL\";\n  OPCODE[OPCODE[\"SYSCALL\"] = 104] = \"SYSCALL\";\n  OPCODE[OPCODE[\"TAILCALL\"] = 105] = \"TAILCALL\";\n  OPCODE[OPCODE[\"DUPFROMALTSTACK\"] = 106] = \"DUPFROMALTSTACK\"; // Stack\n\n  OPCODE[OPCODE[\"TOALTSTACK\"] = 107] = \"TOALTSTACK\";\n  OPCODE[OPCODE[\"FROMALTSTACK\"] = 108] = \"FROMALTSTACK\";\n  OPCODE[OPCODE[\"XDROP\"] = 109] = \"XDROP\";\n  OPCODE[OPCODE[\"XSWAP\"] = 114] = \"XSWAP\";\n  OPCODE[OPCODE[\"XTUCK\"] = 115] = \"XTUCK\";\n  OPCODE[OPCODE[\"DEPTH\"] = 116] = \"DEPTH\";\n  OPCODE[OPCODE[\"DROP\"] = 117] = \"DROP\";\n  OPCODE[OPCODE[\"DUP\"] = 118] = \"DUP\";\n  OPCODE[OPCODE[\"NIP\"] = 119] = \"NIP\";\n  OPCODE[OPCODE[\"OVER\"] = 120] = \"OVER\";\n  OPCODE[OPCODE[\"PICK\"] = 121] = \"PICK\";\n  OPCODE[OPCODE[\"ROLL\"] = 122] = \"ROLL\";\n  OPCODE[OPCODE[\"ROT\"] = 123] = \"ROT\";\n  OPCODE[OPCODE[\"SWAP\"] = 124] = \"SWAP\";\n  OPCODE[OPCODE[\"TUCK\"] = 125] = \"TUCK\"; // Splice\n\n  OPCODE[OPCODE[\"CAT\"] = 126] = \"CAT\";\n  OPCODE[OPCODE[\"SUBSTR\"] = 127] = \"SUBSTR\";\n  OPCODE[OPCODE[\"LEFT\"] = 128] = \"LEFT\";\n  OPCODE[OPCODE[\"RIGHT\"] = 129] = \"RIGHT\";\n  OPCODE[OPCODE[\"SIZE\"] = 130] = \"SIZE\"; // Bitwise logic\n\n  OPCODE[OPCODE[\"INVERT\"] = 131] = \"INVERT\";\n  OPCODE[OPCODE[\"AND\"] = 132] = \"AND\";\n  OPCODE[OPCODE[\"OR\"] = 133] = \"OR\";\n  OPCODE[OPCODE[\"XOR\"] = 134] = \"XOR\";\n  OPCODE[OPCODE[\"EQUAL\"] = 135] = \"EQUAL\"; // EQUALVERIFY = 0x88, // Same as EQUAL, but runs VERIFY afterward.\n  // RESERVED1 = 0x89, // Transaction is invalid unless occuring in an unexecuted IF branch\n  // RESERVED2 = 0x8A, // Transaction is invalid unless occuring in an unexecuted IF branch\n  // Arithmetic\n  // Note: Arithmetic inputs are limited to signed 32-bit integers, but may overflow their output.\n\n  OPCODE[OPCODE[\"INC\"] = 139] = \"INC\";\n  OPCODE[OPCODE[\"DEC\"] = 140] = \"DEC\"; // SAL           = 0x8D, // The input is multiplied by 2.\n  // SAR           = 0x8E, // The input is divided by 2.\n\n  OPCODE[OPCODE[\"NEGATE\"] = 143] = \"NEGATE\";\n  OPCODE[OPCODE[\"ABS\"] = 144] = \"ABS\";\n  OPCODE[OPCODE[\"NOT\"] = 145] = \"NOT\";\n  OPCODE[OPCODE[\"NZ\"] = 146] = \"NZ\";\n  OPCODE[OPCODE[\"ADD\"] = 147] = \"ADD\";\n  OPCODE[OPCODE[\"SUB\"] = 148] = \"SUB\";\n  OPCODE[OPCODE[\"MUL\"] = 149] = \"MUL\";\n  OPCODE[OPCODE[\"DIV\"] = 150] = \"DIV\";\n  OPCODE[OPCODE[\"MOD\"] = 151] = \"MOD\";\n  OPCODE[OPCODE[\"SHL\"] = 152] = \"SHL\";\n  OPCODE[OPCODE[\"SHR\"] = 153] = \"SHR\";\n  OPCODE[OPCODE[\"BOOLAND\"] = 154] = \"BOOLAND\";\n  OPCODE[OPCODE[\"BOOLOR\"] = 155] = \"BOOLOR\";\n  OPCODE[OPCODE[\"NUMEQUAL\"] = 156] = \"NUMEQUAL\";\n  OPCODE[OPCODE[\"NUMNOTEQUAL\"] = 158] = \"NUMNOTEQUAL\";\n  OPCODE[OPCODE[\"LT\"] = 159] = \"LT\";\n  OPCODE[OPCODE[\"GT\"] = 160] = \"GT\";\n  OPCODE[OPCODE[\"LTE\"] = 161] = \"LTE\";\n  OPCODE[OPCODE[\"GTE\"] = 162] = \"GTE\";\n  OPCODE[OPCODE[\"MIN\"] = 163] = \"MIN\";\n  OPCODE[OPCODE[\"MAX\"] = 164] = \"MAX\";\n  OPCODE[OPCODE[\"WITHIN\"] = 165] = \"WITHIN\"; // Crypto\n  // RIPEMD160 = 0xA6, // The input is hashed using RIPEMD-160.\n\n  OPCODE[OPCODE[\"SHA1\"] = 167] = \"SHA1\";\n  OPCODE[OPCODE[\"SHA256\"] = 168] = \"SHA256\";\n  OPCODE[OPCODE[\"HASH160\"] = 169] = \"HASH160\";\n  OPCODE[OPCODE[\"HASH256\"] = 170] = \"HASH256\"; // tslint:disable-next-line:max-line-length\n\n  OPCODE[OPCODE[\"CHECKSIG\"] = 172] = \"CHECKSIG\"; // tslint:disable-next-line:max-line-length\n\n  OPCODE[OPCODE[\"CHECKMULTISIG\"] = 174] = \"CHECKMULTISIG\"; // Array\n  // tslint:disable:indent\n\n  OPCODE[OPCODE[\"ARRAYSIZE\"] = 192] = \"ARRAYSIZE\";\n  OPCODE[OPCODE[\"PACK\"] = 193] = \"PACK\";\n  OPCODE[OPCODE[\"UNPACK\"] = 194] = \"UNPACK\";\n  OPCODE[OPCODE[\"PICKITEM\"] = 195] = \"PICKITEM\";\n  OPCODE[OPCODE[\"SETITEM\"] = 196] = \"SETITEM\";\n  OPCODE[OPCODE[\"NEWARRAY\"] = 197] = \"NEWARRAY\";\n  OPCODE[OPCODE[\"NEWSTRUCT\"] = 198] = \"NEWSTRUCT\";\n  OPCODE[OPCODE[\"NEWMAP\"] = 199] = \"NEWMAP\";\n  OPCODE[OPCODE[\"APPEND\"] = 200] = \"APPEND\";\n  OPCODE[OPCODE[\"REVERSE\"] = 201] = \"REVERSE\";\n  OPCODE[OPCODE[\"REMOVE\"] = 202] = \"REMOVE\";\n  OPCODE[OPCODE[\"HASKEY\"] = 203] = \"HASKEY\";\n  OPCODE[OPCODE[\"KEYS\"] = 204] = \"KEYS\";\n  OPCODE[OPCODE[\"VALUES\"] = 205] = \"VALUES\"; // Exception\n\n  OPCODE[OPCODE[\"THROW\"] = 240] = \"THROW\";\n  OPCODE[OPCODE[\"THROWIFNOT\"] = 241] = \"THROWIFNOT\";\n})(OPCODE || (OPCODE = {}));\n\nexport default OPCODE;",{"version":3,"sources":["/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/common/opCode.ts"],"names":[],"mappings":"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","sourcesContent":["enum OPCODE {\n    // Constants\n    PUSH0 = 0x00, // An empty array of bytes is pushed onto the stack.\n    PUSHF = PUSH0,\n    PUSHBYTES1 = 0x01, // 0x01-0x4B The next bytes is data to be pushed onto the stack\n    PUSHBYTES75 = 0x4B,\n    PUSHDATA1 = 0x4C, // The next byte contains the number of bytes to be pushed onto the stack.\n    PUSHDATA2 = 0x4D, // The next two bytes contain the number of bytes to be pushed onto the stack.\n    PUSHDATA4 = 0x4E, // The next four bytes contain the number of bytes to be pushed onto the stack.\n    PUSHM1 = 0x4F, // The number -1 is pushed onto the stack.\n    PUSH1 = 0x51, // The number 1 is pushed onto the stack.\n    PUSHT = PUSH1,\n    PUSH2 = 0x52, // The number 2 is pushed onto the stack.\n    PUSH3 = 0x53, // The number 3 is pushed onto the stack.\n    PUSH4 = 0x54, // The number 4 is pushed onto the stack.\n    PUSH5 = 0x55, // The number 5 is pushed onto the stack.\n    PUSH6 = 0x56, // The number 6 is pushed onto the stack.\n    PUSH7 = 0x57, // The number 7 is pushed onto the stack.\n    PUSH8 = 0x58, // The number 8 is pushed onto the stack.\n    PUSH9 = 0x59, // The number 9 is pushed onto the stack.\n    PUSH10 = 0x5A, // The number 10 is pushed onto the stack.\n    PUSH11 = 0x5B, // The number 11 is pushed onto the stack.\n    PUSH12 = 0x5C, // The number 12 is pushed onto the stack.\n    PUSH13 = 0x5D, // The number 13 is pushed onto the stack.\n    PUSH14 = 0x5E, // The number 14 is pushed onto the stack.\n    PUSH15 = 0x5F, // The number 15 is pushed onto the stack.\n    PUSH16 = 0x60, // The number 16 is pushed onto the stack.\n\n    // Flow control\n    NOP = 0x61, // Does nothing.\n    JMP = 0x62,\n    JMPIF = 0x63,\n    JMPIFNOT = 0x64,\n    CALL = 0x65,\n    RET = 0x66,\n    APPCALL = 0x67,\n    SYSCALL = 0x68,\n    TAILCALL = 0x69,\n    DUPFROMALTSTACK = 0x6A,\n\n    // Stack\n    TOALTSTACK = 0x6B, // Puts the input onto the top of the alt stack. Removes it from the main stack.\n    FROMALTSTACK = 0x6C, // Puts the input onto the top of the main stack. Removes it from the alt stack.\n    XDROP = 0x6D,\n    XSWAP = 0x72,\n    XTUCK = 0x73,\n    DEPTH = 0x74, // Puts the number of stack items onto the stack.\n    DROP = 0x75, // Removes the top stack item.\n    DUP = 0x76, // Duplicates the top stack item.\n    NIP = 0x77, // Removes the second-to-top stack item.\n    OVER = 0x78, // Copies the second-to-top stack item to the top.\n    PICK = 0x79, // The item n back in the stack is copied to the top.\n    ROLL = 0x7A, // The item n back in the stack is moved to the top.\n    ROT = 0x7B, // The top three items on the stack are rotated to the left.\n    SWAP = 0x7C, // The top two items on the stack are swapped.\n    TUCK = 0x7D, // The item at the top of the stack is copied and inserted before the second-to-top item.\n\n    // Splice\n    CAT = 0x7E, // Concatenates two strings.\n    SUBSTR = 0x7F, // Returns a section of a string.\n    LEFT = 0x80, // Keeps only characters left of the specified point in a string.\n    RIGHT = 0x81, // Keeps only characters right of the specified point in a string.\n    SIZE = 0x82, // Returns the length of the input string.\n\n    // Bitwise logic\n    INVERT = 0x83, // Flips all of the bits in the input.\n    AND = 0x84, // Boolean and between each bit in the inputs.\n    OR = 0x85, // Boolean or between each bit in the inputs.\n    XOR = 0x86, // Boolean exclusive or between each bit in the inputs.\n    EQUAL = 0x87, // Returns 1 if the inputs are exactly equal, 0 otherwise.\n    // EQUALVERIFY = 0x88, // Same as EQUAL, but runs VERIFY afterward.\n    // RESERVED1 = 0x89, // Transaction is invalid unless occuring in an unexecuted IF branch\n    // RESERVED2 = 0x8A, // Transaction is invalid unless occuring in an unexecuted IF branch\n\n    // Arithmetic\n    // Note: Arithmetic inputs are limited to signed 32-bit integers, but may overflow their output.\n    INC = 0x8B, // 1 is added to the input.\n    DEC = 0x8C, // 1 is subtracted from the input.\n    // SAL           = 0x8D, // The input is multiplied by 2.\n    // SAR           = 0x8E, // The input is divided by 2.\n    NEGATE = 0x8F, // The sign of the input is flipped.\n    ABS = 0x90, // The input is made positive.\n    NOT = 0x91, // If the input is 0 or 1, it is flipped. Otherwise the output will be 0.\n    NZ = 0x92, // Returns 0 if the input is 0. 1 otherwise.\n    ADD = 0x93, // a is added to b.\n    SUB = 0x94, // b is subtracted from a.\n    MUL = 0x95, // a is multiplied by b.\n    DIV = 0x96, // a is divided by b.\n    MOD = 0x97, // Returns the remainder after dividing a by b.\n    SHL = 0x98, // Shifts a left b bits, preserving sign.\n    SHR = 0x99, // Shifts a right b bits, preserving sign.\n    BOOLAND = 0x9A, // If both a and b are not 0, the output is 1. Otherwise 0.\n    BOOLOR = 0x9B, // If a or b is not 0, the output is 1. Otherwise 0.\n    NUMEQUAL = 0x9C, // Returns 1 if the numbers are equal, 0 otherwise.\n    NUMNOTEQUAL = 0x9E, // Returns 1 if the numbers are not equal, 0 otherwise.\n    LT = 0x9F, // Returns 1 if a is less than b, 0 otherwise.\n    GT = 0xA0, // Returns 1 if a is greater than b, 0 otherwise.\n    LTE = 0xA1, // Returns 1 if a is less than or equal to b, 0 otherwise.\n    GTE = 0xA2, // Returns 1 if a is greater than or equal to b, 0 otherwise.\n    MIN = 0xA3, // Returns the smaller of a and b.\n    MAX = 0xA4, // Returns the larger of a and b.\n    WITHIN = 0xA5, // Returns 1 if x is within the specified range (left-inclusive), 0 otherwise.\n\n    // Crypto\n    // RIPEMD160 = 0xA6, // The input is hashed using RIPEMD-160.\n    SHA1 = 0xA7, // The input is hashed using SHA-1.\n    SHA256 = 0xA8, // The input is hashed using SHA-256.\n    HASH160 = 0xA9,\n    HASH256 = 0xAA,\n    // tslint:disable-next-line:max-line-length\n    CHECKSIG = 0xAC, // The entire transaction's outputs inputs and script (from the most recently-executed CODESEPARATOR to the end) are hashed. The signature used by CHECKSIG must be a valid signature for this hash and public key. If it is 1 is returned 0 otherwise.\n    // tslint:disable-next-line:max-line-length\n    CHECKMULTISIG = 0xAE, // For each signature and public key pair CHECKSIG is executed. If more public keys than signatures are listed some key/sig pairs can fail. All signatures need to match a public key. If all signatures are valid 1 is returned 0 otherwise. Due to a bug one extra unused value is removed from the stack.\n\n    // Array\n    // tslint:disable:indent\n    ARRAYSIZE  = 0xC0,\n    PACK       = 0xC1,\n    UNPACK     = 0xC2,\n    PICKITEM   = 0xC3,\n    SETITEM    = 0xC4,\n    NEWARRAY   = 0xC5,\n    NEWSTRUCT  = 0xC6,\n    NEWMAP     = 0xC7,\n    APPEND     = 0xC8,\n    REVERSE    = 0xC9,\n    REMOVE     = 0xCA,\n    HASKEY     = 0xCB,\n    KEYS       = 0xCC,\n    VALUES     = 0xCD,\n\n    // Exception\n    THROW = 0xF0,\n    THROWIFNOT = 0xF1\n}\n\nexport default OPCODE;\n"],"sourceRoot":""}]}
{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js??ref--13-3!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/wasmTransaction.ts","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/sdk/transaction/wasmTransaction.ts","mtime":1557897014000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _Promise from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport _JSON$stringify from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport { Fixed64 } from \"../common/classesUtils\";\nimport { Address } from \"../wallet/address\";\nimport { TxType, Transaction } from \"./transaction\";\nimport { InvokeCode } from \"./payload\";\nimport { str2hexstr, reverseHex, num2hexstring, hexstr2str } from \"../common/functionsUtils\";\nimport { CONTRACTS_TEST, defaultPayer, defaultPrivateKey } from \"../common/consts\";\nimport RestClient from \"../network/rest/restClient\";\nimport { PrivateKey } from \"../crypto/privateKey\";\nimport { signTransaction } from \"./nativeTransaction\";\nimport { ERROR_CODE } from \"../common/error\";\nexport var contractParams = function contractParams() {\n  _classCallCheck(this, contractParams);\n\n  this.type = 'string';\n  this.value = '';\n};\nexport var sendingParams = function sendingParams() {\n  _classCallCheck(this, sendingParams);\n\n  this.Params = new Array();\n};\nexport function makeInvokeTransaction(method, args, contractAddr, gasPrice, gasLimit, payer) {\n  var tx = new Transaction();\n  tx.type = TxType.Invoke;\n  var params = new Array();\n\n  for (var i = 0; i < args.length; i++) {\n    var _param = new contractParams();\n\n    _param.value = args[i];\n    params.push(_param);\n  }\n\n  var sendingArg = new sendingParams();\n  sendingArg.Params = params;\n\n  var argstr = _JSON$stringify(sendingArg);\n\n  var resultByte = str2hexstr('1') + reverseHex(contractAddr) + num2hexstring(method.length) + str2hexstr(method) + num2hexstring(argstr.length) + str2hexstr(argstr);\n  var payload = new InvokeCode();\n  payload.code = resultByte;\n  tx.payload = payload;\n  tx.txAttributes = 0x01;\n\n  if (gasLimit) {\n    tx.gasLimit = new Fixed64(gasLimit);\n  }\n\n  if (gasPrice) {\n    tx.gasPrice = new Fixed64(gasPrice);\n  }\n\n  if (payer) {\n    tx.payer = payer;\n  }\n\n  return tx;\n}\n;\nexport function getContractBalance(url, contractAddr, address) {\n  return new _Promise(function (resolve, reject) {\n    var payer = new Address(defaultPayer);\n    var privateKey = new PrivateKey(defaultPrivateKey);\n    var args = [];\n    args.push(address);\n    var tx = makeInvokeTransaction('balanceOf', args, contractAddr, '1', '20000', payer);\n    signTransaction(tx, privateKey);\n    var rest = new RestClient(url);\n    rest.sendRawTransaction(tx.serialize(), true).then(function (res) {\n      var balance = hexstr2str(res.Result.Result);\n      if (balance === '') resolve('0');\n      resolve(balance);\n    });\n  });\n}\nexport function wasmTransfer(tokenType, from, to, amount, gasPrice, gasLimit, fromKey, payer) {\n  var contractAddr = '';\n\n  for (var i = 0; i < CONTRACTS_TEST.length; i++) {\n    if (tokenType === CONTRACTS_TEST[i].name) {\n      contractAddr = CONTRACTS_TEST[i].contractAddr;\n      break;\n    }\n  }\n\n  if (contractAddr === '') {\n    throw ERROR_CODE.INVALID_PARAMS;\n  }\n\n  var args = [];\n  args.push(from);\n  args.push(to);\n  args.push(amount);\n  var tx;\n\n  if (!payer) {\n    var fromAddr = new Address(from);\n    tx = makeInvokeTransaction('transfer', args, contractAddr, gasPrice, gasLimit, fromAddr);\n  } else {\n    var payerAddr = new Address(payer);\n    tx = makeInvokeTransaction('transfer', args, contractAddr, gasPrice, gasLimit, payerAddr);\n  }\n\n  var fromPK = new PrivateKey(fromKey);\n  signTransaction(tx, fromPK);\n  return tx.serialize();\n}",null]}
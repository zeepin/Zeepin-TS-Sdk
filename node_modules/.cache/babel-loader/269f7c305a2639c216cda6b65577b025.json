{"remainingRequest":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js!/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/index.js","dependencies":[{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/packages/index.js","mtime":1557898689000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _Promise from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/cindice/Documents/github/Zeepin-TS-Sdk/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { Wallet } from \"./sdk/wallet/wallet\";\nimport { keystoreCheck } from \"./sdk/common/functionsUtils\";\nimport { resultParams } from \"./sdk/common/classesUtils\";\nimport RestClient from \"./sdk/network/rest/restClient\";\nimport { CONTRACTS_TEST, HTTP_REST_PORT, HTTP_RPC_PORT, HTTP_WS_PORT, TEST_NODE } from \"./sdk/common/consts\";\nimport { Address } from \"./sdk/wallet/address\";\nimport { getContractBalance, wasmTransfer as _wasmTransfer } from \"./sdk/transaction/wasmTransaction\";\nimport { nativeTransfer as _nativeTransfer } from \"./sdk/transaction/nativeTransaction\";\nimport RpcClient from \"./sdk/network/rpc/rpcClient\";\nvar URL = '192.168.199.244';\nvar myUrl = \"http://\".concat(URL);\n\nvar Zeepin =\n/*#__PURE__*/\nfunction () {\n  function Zeepin() {\n    _classCallCheck(this, Zeepin);\n  }\n\n  _createClass(Zeepin, null, [{\n    key: \"setUrl\",\n    value: function setUrl(url) {\n      URL = url;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl() {\n      return URL;\n    }\n    /**\n     * 创建钱包\n     *\n     * password: 账户密码\n     * 返回钱包地址、keystore、私钥\n     */\n\n  }, {\n    key: \"createWallet\",\n    value: function createWallet(password) {\n      var wallet = Wallet.createWallet(password);\n      var obj = {\n        address: wallet.accounts[0].address.toBase58(),\n        keystore: wallet.toJsonObj(),\n        privateKey: wallet.accounts[0].exportPrivateKey(password).key\n      };\n      return obj;\n    }\n    /**\n     * 从私钥导入钱包\n     *\n     * password: 账户密码\n     * privateKey: 私钥\n     * 返回钱包地址、keystore、私钥\n     */\n\n  }, {\n    key: \"importByPrivateKey\",\n    value: function importByPrivateKey(password, privateKey) {\n      var wallet = Wallet.importWalletByPrivateKey(password, privateKey);\n      var obj = {\n        address: wallet.accounts[0].address.toBase58(),\n        keystore: wallet.toJsonObj(),\n        privateKey: wallet.accounts[0].exportPrivateKey(password).key\n      };\n      return obj;\n    }\n    /**\n     * 从keystore导入钱包\n     *\n     * password: 账户密码\n     * 返回钱包地址、keystore、私钥\n     */\n\n  }, {\n    key: \"importByKeystore\",\n    value: function importByKeystore(password, keystore) {\n      keystoreCheck(keystore);\n      var wallet = Wallet.importWalletByKeystore(password, keystore);\n      var obj = {\n        address: wallet.accounts[0].address.toBase58(),\n        keystore: wallet.toJsonObj(),\n        privateKey: wallet.accounts[0].exportPrivateKey(password, keystore.scrypt.n).key\n      };\n      return obj;\n    }\n    /**\n     * 更改钱包密码\n     *\n     * 返回钱包地址、keystore、私钥\n     */\n\n  }, {\n    key: \"modifyPassword\",\n    value: function modifyPassword(oldPassword, newPassword, keystore) {\n      keystoreCheck(keystore);\n      var wallet = Wallet.modifyPassword(oldPassword, newPassword, keystore);\n      var obj = {\n        address: wallet.accounts[0].address.toBase58(),\n        keystore: wallet.toJsonObj(),\n        privateKey: wallet.accounts[0].exportPrivateKey(newPassword).key\n      };\n      return obj;\n    }\n    /**\n     * 查询ZPT和Gala余额\n     *\n     * address: 账户地址\n     */\n\n  }, {\n    key: \"balanceOfNative\",\n    value: function balanceOfNative(address) {\n      var rest = new RestClient(myUrl + ':20334');\n      var result = [];\n      return new _Promise(function (resolve, reject) {\n        rest.getBalance(new Address(address)).then(function (res) {\n          var param1 = new resultParams();\n          param1.name = 'zpt';\n          param1.value = res.Result.zpt;\n          result.push(param1);\n          var param2 = new resultParams();\n          param2.name = 'gala';\n          param2.value = res.Result.gala;\n          result.push(param2);\n          resolve(result);\n        });\n      });\n    }\n    /**\n     * 查询ZUSD余额\n     *\n     * address: 账户地址\n     */\n\n  }, {\n    key: \"balanceOfOthers\",\n    value: function balanceOfOthers(address) {\n      var result = [];\n      return new _Promise(function (resolve, reject) {\n        var _loop = function _loop(i) {\n          getContractBalance(myUrl + ':20334', CONTRACTS_TEST[i].contractAddr, address).then(function (res) {\n            var param = new resultParams();\n            param.name = CONTRACTS_TEST[i].name;\n            param.value = res;\n            result.push(param);\n            if (result.length === CONTRACTS_TEST.length) resolve(result);\n          });\n        };\n\n        for (var i = 0; i < CONTRACTS_TEST.length; i++) {\n          _loop(i);\n        }\n      });\n    }\n    /**\n     * zpt和gala转账交易\n     *\n     * tokenType: 'zpt'或'gala',小写, string\n     * from: 转出地址, string\n     * to: 转入地址, string\n     * amount: 转账金额(精度10000，如：需转账10，应填入100000), string\n     * fromKey: 转出账户私钥, string\n     */\n\n  }, {\n    key: \"nativeTransfer\",\n    value: function nativeTransfer(tokenType, from, to, amount, fromKey, payer) {\n      return new _Promise(function (resolve, reject) {\n        var rest = new RestClient(myUrl + ':20334');\n        var rpc = new RpcClient(myUrl + ':20336');\n\n        var TxString = _nativeTransfer(tokenType, from, to, amount, '1', '20000', fromKey, payer);\n\n        rest.sendRawTransaction(TxString).then(function (res) {\n          if (typeof res.Result === 'string' && res.Result.length === 64) {\n            var timer = setInterval(function () {\n              rpc.getSmartCodeEvent(res.Result).then(function (getRes) {\n                if (getRes.result !== null) {\n                  clearInterval(timer);\n                  timer = null;\n                  if (getRes.result.State === 1) resolve(true);else reject(false);\n                }\n              });\n            }, 1000);\n          } else {\n            reject(false);\n          }\n        });\n      });\n    }\n    /**\n     * zusd和7种矿石转账交易\n     *\n     * tokenType: 'zusd'或7种矿石名,小写, string\n     * from: 转出地址, string\n     * to: 转入地址, string\n     * amount: 转账金额(精度10000，如：需转账10，应填入100000), string\n     * fromKey: 转出账户私钥, string\n     */\n\n  }, {\n    key: \"wasmTransfer\",\n    value: function wasmTransfer(tokenType, from, to, amount, fromKey, payer) {\n      return new _Promise(function (resolve, reject) {\n        var rest = new RestClient(myUrl + ':20334');\n        var rpc = new RpcClient(myUrl + ':20336');\n\n        var TxString = _wasmTransfer(tokenType, from, to, amount, '1', '20000', fromKey, payer);\n\n        rest.sendRawTransaction(TxString).then(function (res) {\n          if (typeof res.Result === 'string' && res.Result.length === 64) {\n            var timer = setInterval(function () {\n              rpc.getSmartCodeEvent(res.Result).then(function (getRes) {\n                if (getRes.result !== null) {\n                  clearInterval(timer);\n                  timer = null;\n                  if (getRes.result.State === 1 && getRes.result.Notify[0].States[0].length > 10) resolve(true);else reject(false);\n                }\n              });\n            }, 1000);\n          } else {\n            reject(false);\n          }\n        });\n      });\n    }\n    /**\n     * 返回签名后的交易zpt/gala\n     *\n     * tokenType: 'zpt'或'gala',小写, string\n     * from: 转出地址, string\n     * to: 转入地址, string\n     * amount: 转账金额(精度10000，如：需转账10，应填入100000), string\n     * fromKey: 转出账户私钥, string\n     */\n\n  }, {\n    key: \"nativeTransferStr\",\n    value: function nativeTransferStr(tokenType, from, to, amount, fromKey, payer) {\n      return _nativeTransfer(tokenType, from, to, amount, '1', '20000', fromKey, payer);\n    }\n    /**\n     * 返回签名后的交易zust/七种矿石\n     *\n     * tokenType: 'zusd'或7种矿石名,小写, string\n     * from: 转出地址, string\n     * to: 转入地址, string\n     * amount: 转账金额(精度10000，如：需转账10，应填入100000), string\n     * fromKey: 转出账户私钥, string\n     */\n\n  }, {\n    key: \"wasmTransferStr\",\n    value: function wasmTransferStr(tokenType, from, to, amount, fromKey, payer) {\n      return _wasmTransfer(tokenType, from, to, amount, '1', '20000', fromKey, payer);\n    }\n  }]);\n\n  return Zeepin;\n}();\n\nexport { Zeepin as default };",null]}